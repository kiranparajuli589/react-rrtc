{"version":3,"file":"index.js","sources":["../../node_modules/.pnpm/@rollup+plugin-typescript@11.1.6_rollup@4.16.0_tslib@2.6.2_typescript@5.4.5/node_modules/tslib/tslib.es6.js","../../node_modules/.pnpm/recordrtc@5.6.2/node_modules/recordrtc/RecordRTC.js","../../src/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","'use strict';\r\n\r\n// Last time updated: 2021-03-09 3:20:22 AM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.6.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!config.disableLogs) {\r\n            console.log('RecordRTC version: ', self.version);\r\n        }\r\n\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url;\r\n\r\n                try {\r\n                    url = URL.createObjectURL(blob);\r\n                } catch (e) {}\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            try {\r\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n                ], {\r\n                    type: 'application/javascript'\r\n                }));\r\n\r\n                var worker = new Worker(blob);\r\n                URL.revokeObjectURL(blob);\r\n                return worker;\r\n            } catch (e) {}\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internalRecorder = recorder.getInternalRecorder();\r\n         * if(internalRecorder instanceof MultiStreamRecorder) {\r\n         *     internalRecorder.addStreams([newAudioStream]);\r\n         *     internalRecorder.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (self.state === 'recording' && !config.disableLogs) {\r\n                console.warn('Stop an active recorder.');\r\n            }\r\n\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogsCache = config.disableLogs;\r\n\r\n            config = {\r\n                disableLogs: true\r\n            };\r\n            self.reset();\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            config.disableLogs = disableLogsCache;\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.6.2'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.6.2';\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RecordRTC', [], function() {\r\n        return RecordRTC;\r\n    });\r\n}\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n\r\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\r\n            recorder = WebAssemblyRecorder;\r\n        }\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    if (!recorder && isSafari) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    return recorder;\r\n}\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = getTracks(mediaStream, 'video')[0];\r\n\r\n                if (isFirefox) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT supports webp-encoding yet\r\n                        // But Firefox do supports WebAssemblyRecorder\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp,\r\n                workerPath: this.workerPath,\r\n                webAssemblyPath: this.webAssemblyPath,\r\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\r\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\r\n\r\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\r\n                isSingleRecorder = false;\r\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\r\n                isSingleRecorder = false;\r\n            }\r\n\r\n            if (isSingleRecorder === true) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof global === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    global.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!global.console) {\r\n        global.console = {};\r\n    }\r\n\r\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n        global.console.error = global.console.log = global.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {\r\n            documentElement: {\r\n                appendChild: function() {\r\n                    return '';\r\n                }\r\n            }\r\n        };\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                },\r\n                style: {}\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = global;\r\n})(typeof global !== 'undefined' ? global : null);\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\r\n\r\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n\r\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\r\n    isSafari = false;\r\n    isChrome = true;\r\n}\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n    if (fileExtension.indexOf(';') !== -1) {\r\n        // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\r\n        fileExtension = fileExtension.split(';')[0];\r\n    }\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getTracks(stream, kind) {\r\n    if (!stream || !stream.getTracks) {\r\n        return [];\r\n    }\r\n\r\n    return stream.getTracks().filter(function(t) {\r\n        return t.kind === (kind || 'audio');\r\n    });\r\n}\r\n\r\nfunction setSrcObject(stream, element) {\r\n    if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        element.srcObject = stream;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction getSeekableBlob(inputBlob, callback) {\r\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\r\n    if (typeof EBML === 'undefined') {\r\n        throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\r\n    }\r\n\r\n    var reader = new EBML.Reader();\r\n    var decoder = new EBML.Decoder();\r\n    var tools = EBML.tools;\r\n\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function(e) {\r\n        var ebmlElms = decoder.decode(this.result);\r\n        ebmlElms.forEach(function(element) {\r\n            reader.read(element);\r\n        });\r\n        reader.stop();\r\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\r\n        var body = this.result.slice(reader.metadataSize);\r\n        var newBlob = new Blob([refinedMetadataBuf, body], {\r\n            type: 'video/webm'\r\n        });\r\n\r\n        callback(newBlob);\r\n    };\r\n    fileReader.readAsArrayBuffer(inputBlob);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\r\n    RecordRTC.getTracks = getTracks;\r\n    RecordRTC.getSeekableBlob = getSeekableBlob;\r\n    RecordRTC.bytesToSize = bytesToSize;\r\n    RecordRTC.isElectron = isElectron;\r\n}\r\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\n\r\nfunction isMediaRecorderCompatible() {\r\n    if (isFirefox || isSafari || isEdge) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\n\r\n// ______________________\r\n// MediaStreamRecorder.js\r\n\r\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\r\n\r\nfunction MediaStreamRecorder(mediaStream, config) {\r\n    var self = this;\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    if (typeof MediaRecorder === 'undefined') {\r\n        throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\r\n    }\r\n\r\n    config = config || {\r\n        // bitsPerSecond: 256 * 8 * 1024,\r\n        mimeType: 'video/webm'\r\n    };\r\n\r\n    if (config.type === 'audio') {\r\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\r\n            var stream;\r\n            if (!!navigator.mozGetUserMedia) {\r\n                stream = new MediaStream();\r\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\r\n            } else {\r\n                // webkitMediaStream\r\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\r\n            }\r\n            mediaStream = stream;\r\n        }\r\n\r\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\r\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\r\n        }\r\n\r\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\r\n            // forcing better codecs on Firefox (via #166)\r\n            config.mimeType = 'audio/ogg';\r\n        }\r\n    }\r\n\r\n    var arrayOfBlobs = [];\r\n\r\n    /**\r\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n     * @returns {Array} Returns array of recorded blobs.\r\n     */\r\n    this.getArrayOfBlobs = function() {\r\n        return arrayOfBlobs;\r\n    };\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // set defaults\r\n        self.blob = null;\r\n        self.clearRecordedData();\r\n        self.timestamps = [];\r\n        allStates = [];\r\n        arrayOfBlobs = [];\r\n\r\n        var recorderHints = config;\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (isChrome && !isMediaRecorderCompatible()) {\r\n            // to support video-only recording on stable\r\n            recorderHints = 'video/vp8';\r\n        }\r\n\r\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\r\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\r\n                if (!config.disableLogs) {\r\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n                }\r\n\r\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\r\n            }\r\n        }\r\n\r\n        // using MediaRecorder API here\r\n        try {\r\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\r\n\r\n            // reset\r\n            config.mimeType = recorderHints.mimeType;\r\n        } catch (e) {\r\n            // chrome-based fallback\r\n            mediaRecorder = new MediaRecorder(mediaStream);\r\n        }\r\n\r\n        // old hack?\r\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\r\n            if (!config.disableLogs) {\r\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n            }\r\n        }\r\n\r\n        // Dispatching OnDataAvailable Handler\r\n        mediaRecorder.ondataavailable = function(e) {\r\n            if (e.data) {\r\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\r\n            }\r\n\r\n            if (typeof config.timeSlice === 'number') {\r\n                if (e.data && e.data.size) {\r\n                    arrayOfBlobs.push(e.data);\r\n                    updateTimeStamp();\r\n\r\n                    if (typeof config.ondataavailable === 'function') {\r\n                        // intervals based blobs\r\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                            type: getMimeType(recorderHints)\r\n                        });\r\n                        config.ondataavailable(blob);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\r\n                // make sure that stopRecording always getting fired\r\n                // even if there is invalid data\r\n                if (self.recordingCallback) {\r\n                    self.recordingCallback(new Blob([], {\r\n                        type: getMimeType(recorderHints)\r\n                    }));\r\n                    self.recordingCallback = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                type: getMimeType(recorderHints)\r\n            });\r\n\r\n            if (self.recordingCallback) {\r\n                self.recordingCallback(self.blob);\r\n                self.recordingCallback = null;\r\n            }\r\n        };\r\n\r\n        mediaRecorder.onstart = function() {\r\n            allStates.push('started');\r\n        };\r\n\r\n        mediaRecorder.onpause = function() {\r\n            allStates.push('paused');\r\n        };\r\n\r\n        mediaRecorder.onresume = function() {\r\n            allStates.push('resumed');\r\n        };\r\n\r\n        mediaRecorder.onstop = function() {\r\n            allStates.push('stopped');\r\n        };\r\n\r\n        mediaRecorder.onerror = function(error) {\r\n            if (!error) {\r\n                return;\r\n            }\r\n\r\n            if (!error.name) {\r\n                error.name = 'UnknownError';\r\n            }\r\n\r\n            allStates.push('error: ' + error);\r\n\r\n            if (!config.disableLogs) {\r\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\r\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\r\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\r\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\r\n                    console.error('MediaRecorder security error', error);\r\n                }\r\n\r\n                // older code below\r\n                else if (error.name === 'OutOfMemory') {\r\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'IllegalStreamModification') {\r\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'OtherRecordingError') {\r\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'GenericError') {\r\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\r\n                } else {\r\n                    console.error('MediaRecorder Error', error);\r\n                }\r\n            }\r\n\r\n            (function(looper) {\r\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\r\n                    delete config.timeslice;\r\n\r\n                    // 10 minutes, enough?\r\n                    mediaRecorder.start(10 * 60 * 1000);\r\n                    return;\r\n                }\r\n\r\n                setTimeout(looper, 1000);\r\n            })();\r\n\r\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\r\n                mediaRecorder.stop();\r\n            }\r\n        };\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            updateTimeStamp();\r\n            mediaRecorder.start(config.timeSlice);\r\n        } else {\r\n            // default is 60 minutes; enough?\r\n            // use config => {timeSlice: 1000} otherwise\r\n\r\n            mediaRecorder.start(3.6e+6);\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback(); // old code\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @property {Array} timestamps - Array of time stamps\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * console.log(recorder.timestamps);\r\n     */\r\n    this.timestamps = [];\r\n\r\n    function updateTimeStamp() {\r\n        self.timestamps.push(new Date().getTime());\r\n\r\n        if (typeof config.onTimeStamp === 'function') {\r\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\r\n        }\r\n    }\r\n\r\n    function getMimeType(secondObject) {\r\n        if (mediaRecorder && mediaRecorder.mimeType) {\r\n            return mediaRecorder.mimeType;\r\n        }\r\n\r\n        return secondObject.mimeType || 'video/webm';\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\r\n\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        this.recordingCallback = callback;\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            setTimeout(function() {\r\n                self.blob = new Blob(arrayOfBlobs, {\r\n                    type: getMimeType(config)\r\n                });\r\n\r\n                self.recordingCallback(self.blob);\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'paused') {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n            self.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        arrayOfBlobs = [];\r\n        mediaRecorder = null;\r\n        self.timestamps = [];\r\n    }\r\n\r\n    // Reference to \"MediaRecorder\" object\r\n    var mediaRecorder;\r\n\r\n    /**\r\n     * Access to native MediaRecorder API\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @instance\r\n     * @example\r\n     * var internal = recorder.getInternalRecorder();\r\n     * internal.ondataavailable = function() {}; // override\r\n     * internal.stream, internal.onpause, internal.onstop, etc.\r\n     * @returns {Object} Returns internal recording object.\r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return mediaRecorder;\r\n    };\r\n\r\n    function isMediaStreamActive() {\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function() {\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n\r\n\r\n    /**\r\n     * Get MediaRecorder readonly state.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        if (!mediaRecorder) {\r\n            return 'inactive';\r\n        }\r\n\r\n        return mediaRecorder.state || 'inactive';\r\n    };\r\n\r\n    // list of all recording states\r\n    var allStates = [];\r\n\r\n    /**\r\n     * Get MediaRecorder all recording states.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getAllStates();\r\n     * @returns {Array} Returns all recording states\r\n     */\r\n    this.getAllStates = function() {\r\n        return allStates;\r\n    };\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\r\n    }\r\n\r\n    var self = this;\r\n\r\n    // this method checks if media stream is stopped\r\n    // or if any track is ended.\r\n    (function looper() {\r\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            self.stop();\r\n            return;\r\n        }\r\n\r\n        setTimeout(looper, 1000); // check every second\r\n    })();\r\n\r\n    // for debugging\r\n    this.name = 'MediaStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\r\n}\r\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!getTracks(mediaStream, 'audio').length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            // changed \"44\" to \"36\" via #401\r\n            view.setUint32(4, 36 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n\r\n            // kill webworker (or Chrome will kill your page after ~25 calls)\r\n            webWorker.terminate();\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\r\n            noWorker: config.noWorker\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (typeof RecordRTC.Storage === 'undefined') {\r\n        RecordRTC.Storage = {\r\n            AudioContextConstructor: null,\r\n            AudioContext: window.AudioContext || window.webkitAudioContext\r\n        };\r\n    }\r\n\r\n    if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\r\n        RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\r\n    }\r\n\r\n    var context = RecordRTC.Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.log('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    if (context.createMediaStreamDestination) {\r\n        jsAudioNode.connect(context.createMediaStreamDestination());\r\n    } else {\r\n        jsAudioNode.connect(context.destination);\r\n    }\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    if (config.useWhammyRecorder) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: config.mimeType || 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n        video.playsInline = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\n\r\n// Last time updated: 2019-06-21 4:09:42 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.2.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\r\n\r\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n    (function(that) {\r\n        if (typeof RecordRTC !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (!that) {\r\n            return;\r\n        }\r\n\r\n        if (typeof window !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (typeof global === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        global.navigator = {\r\n            userAgent: browserFakeUserAgent,\r\n            getUserMedia: function() {}\r\n        };\r\n\r\n        if (!global.console) {\r\n            global.console = {};\r\n        }\r\n\r\n        if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n            global.console.error = global.console.log = global.console.log || function() {\r\n                console.log(arguments);\r\n            };\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            /*global document:true */\r\n            that.document = {\r\n                documentElement: {\r\n                    appendChild: function() {\r\n                        return '';\r\n                    }\r\n                }\r\n            };\r\n\r\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n                var obj = {\r\n                    getContext: function() {\r\n                        return obj;\r\n                    },\r\n                    play: function() {},\r\n                    pause: function() {},\r\n                    drawImage: function() {},\r\n                    toDataURL: function() {\r\n                        return '';\r\n                    },\r\n                    style: {}\r\n                };\r\n                return obj;\r\n            };\r\n\r\n            that.HTMLVideoElement = function() {};\r\n        }\r\n\r\n        if (typeof location === 'undefined') {\r\n            /*global location:true */\r\n            that.location = {\r\n                protocol: 'file:',\r\n                href: '',\r\n                hash: ''\r\n            };\r\n        }\r\n\r\n        if (typeof screen === 'undefined') {\r\n            /*global screen:true */\r\n            that.screen = {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        if (typeof URL === 'undefined') {\r\n            /*global screen:true */\r\n            that.URL = {\r\n                createObjectURL: function() {\r\n                    return '';\r\n                },\r\n                revokeObjectURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n        }\r\n\r\n        /*global window:true */\r\n        that.window = global;\r\n    })(typeof global !== 'undefined' ? global : null);\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    elementClass = elementClass || 'multi-streams-mixer';\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style.opacity = 0;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.zIndex = -1;\r\n    canvas.style.top = '-1000em';\r\n    canvas.style.left = '-1000em';\r\n    canvas.className = elementClass;\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element) {\r\n        if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            element.srcObject = stream;\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getTracks().filter(function(t) {\r\n                return t.kind === 'audio';\r\n            }).forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        // mixedVideoStream.prototype.appendStreams = appendStreams;\r\n        // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\r\n        // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getTracks().filter(function(t) {\r\n            return t.kind === 'video';\r\n        }).forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            // because \"self.audioContext\" is not initialized\r\n            // that's why we've to ignore rest of the code\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.className = elementClass;\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        streams.forEach(function(stream) {\r\n            var newStream = new MediaStream();\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n\r\n                newStream.addTrack(stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                })[0]);\r\n            }\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n                audioSource.connect(self.audioDestination);\r\n\r\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                })[0]);\r\n            }\r\n\r\n            arrayOfMediaStreams.push(newStream);\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        if (self.audioContext) {\r\n            self.audioContext.close();\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\r\n\r\nif (typeof RecordRTC === 'undefined') {\r\n    if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n        module.exports = MultiStreamsMixer;\r\n    }\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('MultiStreamsMixer', [], function() {\r\n            return MultiStreamsMixer;\r\n        });\r\n    }\r\n}\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        elementClass: 'multi-streams-mixer',\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\r\n\r\n        if (getAllVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getAllVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            getTracks(stream, 'video').forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Returns MultiStreamsMixer\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * let mixer = recorder.getMixer();\r\n     * mixer.appendStreams([newStream]);\r\n     */\r\n    this.getMixer = function() {\r\n        return mixer;\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     * recorder.recordRTC.onStateChanged = function(state) {};\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n\r\n                    if (!self.blob || !self.blob.size) {\r\n                        reject('Empty blob.', self.blob);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.pauseRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.pauseRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.pauseRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.resumeRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.resumeRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.resumeRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getBlob().then(function(blob) {})\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getBlob());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the internal recording object.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internalRecorder = await recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} \r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getInternalRecorder());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.reset();\r\n     * recorder.startRecording(); // record again\r\n     */\r\n    this.reset = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.reset());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.destroy().then(successCB).catch(errorCB);\r\n     */\r\n    this.destroy = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.destroy());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let state = await recorder.getState();\r\n     * // or\r\n     * recorder.getState().then(state => { console.log(state); })\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getState());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.stopRecording();\r\n     * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n     * invokeSaveAsDialog(blob);\r\n     */\r\n    this.blob = null;\r\n\r\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\r\n    this.version = '5.6.2';\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\n\r\n// ______________________\r\n// WebAssemblyRecorder.js\r\n\r\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\r\n */\r\nfunction WebAssemblyRecorder(stream, config) {\r\n    // based on: github.com/GoogleChromeLabs/webm-wasm\r\n\r\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\r\n        // because it fixes readable/writable streams issues\r\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    config.width = config.width || 640;\r\n    config.height = config.height || 480;\r\n    config.frameRate = config.frameRate || 30;\r\n    config.bitrate = config.bitrate || 1200;\r\n    config.realtime = config.realtime || true;\r\n\r\n    function createBufferURL(buffer, type) {\r\n        return URL.createObjectURL(new Blob([buffer], {\r\n            type: type || ''\r\n        }));\r\n    }\r\n\r\n    var finished;\r\n\r\n    function cameraStream() {\r\n        return new ReadableStream({\r\n            start: function(controller) {\r\n                var cvs = document.createElement('canvas');\r\n                var video = document.createElement('video');\r\n                var first = true;\r\n                video.srcObject = stream;\r\n                video.muted = true;\r\n                video.height = config.height;\r\n                video.width = config.width;\r\n                video.volume = 0;\r\n                video.onplaying = function() {\r\n                    cvs.width = config.width;\r\n                    cvs.height = config.height;\r\n                    var ctx = cvs.getContext('2d');\r\n                    var frameTimeout = 1000 / config.frameRate;\r\n                    var cameraTimer = setInterval(function f() {\r\n                        if (finished) {\r\n                            clearInterval(cameraTimer);\r\n                            controller.close();\r\n                        }\r\n\r\n                        if (first) {\r\n                            first = false;\r\n                            if (config.onVideoProcessStarted) {\r\n                                config.onVideoProcessStarted();\r\n                            }\r\n                        }\r\n\r\n                        ctx.drawImage(video, 0, 0);\r\n                        if (controller._controlledReadableStream.state !== 'closed') {\r\n                            try {\r\n                                controller.enqueue(\r\n                                    ctx.getImageData(0, 0, config.width, config.height)\r\n                                );\r\n                            } catch (e) {}\r\n                        }\r\n                    }, frameTimeout);\r\n                };\r\n                video.play();\r\n            }\r\n        });\r\n    }\r\n\r\n    var worker;\r\n\r\n    function startRecording(stream, buffer) {\r\n        if (!config.workerPath && !buffer) {\r\n            finished = false;\r\n\r\n            // is it safe to use @latest ?\r\n\r\n            fetch(\r\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\r\n            ).then(function(r) {\r\n                r.arrayBuffer().then(function(buffer) {\r\n                    startRecording(stream, buffer);\r\n                });\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\r\n            var blob = new Blob([buffer], {\r\n                type: 'text/javascript'\r\n            });\r\n            config.workerPath = URL.createObjectURL(blob);\r\n        }\r\n\r\n        if (!config.workerPath) {\r\n            console.error('workerPath parameter is missing.');\r\n        }\r\n\r\n        worker = new Worker(config.workerPath);\r\n\r\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === 'READY') {\r\n                worker.postMessage({\r\n                    width: config.width,\r\n                    height: config.height,\r\n                    bitrate: config.bitrate || 1200,\r\n                    timebaseDen: config.frameRate || 30,\r\n                    realtime: config.realtime\r\n                });\r\n\r\n                cameraStream().pipeTo(new WritableStream({\r\n                    write: function(image) {\r\n                        if (finished) {\r\n                            console.error('Got image, but recorder is finished!');\r\n                            return;\r\n                        }\r\n\r\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\r\n                    }\r\n                }));\r\n            } else if (!!event.data) {\r\n                if (!isPaused) {\r\n                    arrayOfBuffers.push(event.data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n        startRecording(stream);\r\n\r\n        if (typeof config.initCallback === 'function') {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    var isPaused;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPaused = false;\r\n    };\r\n\r\n    function terminate(callback) {\r\n        if (!worker) {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Wait for null event data to indicate that the encoding is complete\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === null) {\r\n                worker.terminate();\r\n                worker = null;\r\n\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            }\r\n        });\r\n\r\n        worker.postMessage(null);\r\n    }\r\n\r\n    var arrayOfBuffers = [];\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        finished = true;\r\n\r\n        var recorder = this;\r\n\r\n        terminate(function() {\r\n            recorder.blob = new Blob(arrayOfBuffers, {\r\n                type: 'video/webm'\r\n            });\r\n\r\n            callback(recorder.blob);\r\n        });\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'WebAssemblyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n\r\n        // todo: if recording-ON then STOP it first\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\r\n}\n",null],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","SuppressedError","RecordRTC","mediaStream","config","RecordRTCConfiguration","type","self","initRecorder","initCallback","Recorder","GetRecorderType","mediaRecorder","record","setState","disableLogs","console","log","constructor","name","stopRecording","callback","state","resumeRecording","setTimeout","warn","stop","_callback","warningLog","__blob","keys","forEach","key","blob","bytesToSize","size","url","URL","createObjectURL","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","Worker","navigator","mozGetUserMedia","reader","FileReader","onload","event","target","webWorker","_function","Blob","toString","worker","revokeObjectURL","processInWebWorker","onmessage","data","handleRecordingDuration","counter","recordingDuration","onRecordingStopped","onStateChanged","WARNING","returnObject","startRecording","config2","version","clearRecordedData","pauseRecording","pause","resume","setRecordingDuration","getBlob","toURL","getInternalRecorder","save","fileName","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","duration","image","bufferSize","sampleRate","buffer","reset","getState","destroy","disableLogsCache","Storage","AudioContextConstructor","close","prop","recorderType","audio","video","WhammyRecorder","CanvasRecorder","WebAssemblyRecorder","GifRecorder","StereoAudioRecorder","MediaStreamRecorder","getTracks","MediaRecorder","mimeType","split","bitsPerSecond","recorder","isChrome","isEdge","isOpera","ReadableStream","isMediaRecorderCompatible","isTypeSupported","Array","MultiStreamRecorder","isSafari","MRecordRTC","addStream","_mediaStream","mediaType","gif","audioRecorder","numberOfAudioChannels","timeSlice","onTimeStamp","newStream","videoTrack","isFirefox","MediaStream","addTrack","videoRecorder","canvas","frameInterval","workerPath","webAssemblyPath","frameRate","bitrate","isSingleRecorder","gifRecorder","quality","blobURL","output","callback00","webkitURL","_audioDataURL","_videoDataURL","writeToDisk","args","module","exports","Fetch","_type","replace","options","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","that","global","window","userAgent","getUserMedia","error","document","documentElement","appendChild","createElement","captureStream","mozCaptureStream","obj","getContext","play","drawImage","toDataURL","style","HTMLVideoElement","location","protocol","href","hash","screen","width","height","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","lastTime","element","currTime","Date","getTime","timeToCall","Math","max","id","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","AudioContext","webkitAudioContext","mozAudioContext","webkitGetUserMedia","indexOf","msSaveBlob","msSaveOrOpenBlob","opera","toLowerCase","test","isElectron","bytes","parseInt","floor","pow","toPrecision","file","fileExtension","splitted","fileFullName","round","random","hyperlink","download","click","dispatchEvent","MouseEvent","view","bubbles","cancelable","process","versions","electron","stream","kind","filter","setSrcObject","srcObject","mozSrcObject","webkitMediaStream","track","getSeekableBlob","inputBlob","EBML","Error","Reader","decoder","Decoder","tools","fileReader","decode","read","refinedMetadataBuf","makeMetadataSeekable","metadatas","cues","slice","metadataSize","newBlob","readAsArrayBuffer","verOffset","ix","nAgt","fullVersion","parseFloat","appVersion","majorVersion","substring","isNaN","arrayOfBlobs","updateTimeStamp","timestamps","getMimeType","secondObject","clearRecordedDataCB","getArrayOfBlobs","allStates","recorderHints","canRecordMimeType","ondataavailable","recordingCallback","getNativeBlob","onstart","onpause","onresume","onstop","onerror","looper","manuallyStopped","timeslice","start","getAllStates","checkForInactiveTracks","active","ended","isMediaStreamActive","jsAudioNode","leftchannel","rightchannel","recording","recordingLength","desiredSampRate","mergeLeftRightBuffers","mergeAudioBuffers","cb","interleaved","leftBuffers","rightBuffers","internalInterleavedLength","interpolateArray","newSampleRate","oldSampleRate","fitCount","newData","springFactor","Number","tmp","before","toFixed","after","ceil","atPoint","linearInterpolate","mergeBuffers","channelBuffer","rLength","Float64Array","offset","lng","set","writeUTFBytes","string","setUint8","charCodeAt","leftChannel","rightChannel","inputIndex","index","interleave","interleavedLength","ArrayBuffer","DataView","setUint32","setUint16","setInt16","noWorker","workerURL","terminate","resetVariables","isAudioProcessStarted","isPaused","byteLength","context","audioInput","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","connect","intervalsBasedBuffers","left","right","onaudioprocess","disconnect","onAudioProcessStarted","inputBuffer","getChannelData","chLeft","Float32Array","chRight","createMediaStreamDestination","destination","htmlElement","html2canvas","isCanvasSupportsStreamCapturing","item","globalCanvas","mediaStreamRecorder","isRecording","_isChrome","webkitRTCPeerConnection","chrome","chromeVersion","matchArray","match","useWhammyRecorder","HTMLCanvasElement","CanvasRenderingContext2D","canvasMediaStream","webkitCaptureStream","mdStream","whammy","frames","drawCanvasFrame","getWebPImages","nodeName","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","compile","isPausedRecording","newCanvas","grabMouse","showMousePointer","onrendered","Whammy","Video","drawFrames","paused","isStopDrawing","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","o","context2d","resultFrames","endCheckFrame","sampleColor","maxColorDifference","sqrt","doNotCheckNext","functionToLoop","loop","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","r","b","src","concat","cloneNode","onloadedmetadata","muted","_this","WhammyVideo","whammyInWebWorker","getClusterData","clusterTimecode","clusterCounter","clusterFrames","map","block","flags","trackNum","timecode","String","fromCharCode","join","makeSimpleBlock","discardable","invisible","keyframe","lacing","numToBuffer","num","parts","Uint8Array","reverse","bitsToBuffer","bits","substr","generateEBML","json","ebml","len","zeroes","sizeToString","padded","getStrLength","unpadded","parseRIFF","chunks","webm","info","checkFrames","frameNumber","clusterDuration","cluster","riff","VP8","RIFF","WEBP","frameStart","c","parseWebP","atob","add","init","indexedDB","open","db","dbName","request","onError","onsuccess","setVersion","createObjectStore","putInDB","onupgradeneeded","dataBase","dataStoreName","transaction","getFromStore","portionName","objectStore","get","put","GIFEncoder","script","isHTMLObject","isLoadedMetaData","offsetWidth","offsetHeight","gifEncoder","setRepeat","setDelay","setQuality","onGifRecordingStarted","lastAnimationFrame","drawVideoFrame","time","clearedRecordedData","undefined","lastFrameTime","onGifPreview","addFrame","bin","autoplay","playsInline","MultiStreamsMixer","arrayOfMediaStreams","elementClass","videos","isStopDrawingFrames","opacity","position","zIndex","top","className","useGainNode","drawVideosToCanvas","videosLength","fullcanvas","remaining","x","onRender","getVideo","volume","resetVideoStreams","streams","startDrawingFrames","appendStreams","audioSource","audioContext","audioDestination","releaseStreams","gainNode","audioSources","source","clearRect","getMixedStream","mixedVideoStream","capturedStream","videoStream","getMixedVideoStream","mixedAudioStream","createGain","gain","audioTracksLength","getMixedAudioStream","mixer","tracks","previewStream","addStreams","getMixer","finished","cameraStream","controller","cvs","first","onplaying","ctx","frameTimeout","cameraTimer","setInterval","clearInterval","onVideoProcessStarted","_controlledReadableStream","enqueue","fetch","arrayBuffer","addEventListener","timebaseDen","realtime","pipeTo","WritableStream","write","arrayOfBuffers","RecordRTCPromisesHandler","recordRTC","useRecordRTC","previewVideoRef","useRef","audioPreviewRef","_a","useState","setBlob","_b","setRecorder","_c","recorderState","setRecorderState","_d","recordStream","setRecordStream","countDownSec","getUserMediaStream","constraints","mediaDevices","getAudioTracks","error_1","useEffect","stopListener","addStreamStopListener","blob_1","getScreenStream","getDisplayMedia","screenStream","audioStream","error_2","stream_1","to","from","pack","ar","l","__spreadArray","args_1","afterRecordingStartHook","rtcOptions","current"],"mappings":"4DA+BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,CACV,EACMH,EAASa,MAAMC,KAAMP,UAChC,EA0EO,SAASQ,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,CAAG,MAAOG,GAAKL,EAAOK,GAAO,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAU,CAAC,MAAOG,GAAKL,EAAOK,GAAO,CAC9F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAO,KAIhBO,KAAKR,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUN,MAAMG,EAASC,GAAc,KAAKS,OACtE,GACA,CAEO,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAGhC,EAAGiC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPpC,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,EAAK,EAAEqC,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOhC,IAAO,GAAGsB,EACvJ,SAASM,EAAKpC,GAAK,OAAO,SAAUyC,GAAK,OACzC,SAAcC,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOb,IAAMA,EAAI,EAAGY,EAAG,KAAOX,EAAI,IAAKA,OACnC,GAAIH,EAAI,EAAGC,IAAMhC,EAAY,EAAR6C,EAAG,GAASb,EAAU,OAAIa,EAAG,GAAKb,EAAS,SAAOhC,EAAIgC,EAAU,SAAMhC,EAAES,KAAKuB,GAAI,GAAKA,EAAET,SAAWvB,EAAIA,EAAES,KAAKuB,EAAGa,EAAG,KAAKlB,KAAM,OAAO3B,EAE3J,OADIgC,EAAI,EAAGhC,IAAG6C,EAAK,CAAS,EAARA,EAAG,GAAQ7C,EAAEqB,QACzBwB,EAAG,IACP,KAAK,EAAG,KAAK,EAAG7C,EAAI6C,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEd,MAAOwB,EAAG,GAAIlB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,KAAM/C,EAAIkC,EAAEG,MAAMrC,EAAIA,EAAEK,OAAS,GAAKL,EAAEA,EAAEK,OAAS,KAAkB,IAAVwC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,QAAW,CAC5G,GAAc,IAAVW,EAAG,MAAc7C,GAAM6C,EAAG,GAAK7C,EAAE,IAAM6C,EAAG,GAAK7C,EAAE,IAAM,CAAEkC,EAAEC,MAAQU,EAAG,GAAI,KAAQ,CACtF,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQnC,EAAE,GAAI,CAAEkC,EAAEC,MAAQnC,EAAE,GAAIA,EAAI6C,EAAI,KAAQ,CACrE,GAAI7C,GAAKkC,EAAEC,MAAQnC,EAAE,GAAI,CAAEkC,EAAEC,MAAQnC,EAAE,GAAIkC,EAAEI,IAAIU,KAAKH,GAAK,KAAQ,CAC/D7C,EAAE,IAAIkC,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBF,EAAKf,EAAKrB,KAAKI,EAASqB,EAC3B,CAAC,MAAOV,GAAKqB,EAAK,CAAC,EAAGrB,GAAIQ,EAAI,CAAE,CAAW,QAAED,EAAI/B,EAAI,CAAI,CAC1D,GAAY,EAAR6C,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAExB,MAAOwB,EAAG,GAAKA,EAAG,QAAK,EAAQlB,MAAM,EAC7E,CAtB+CL,CAAK,CAACnB,EAAGyC,GAAM,CAAG,CAuBtE,CAqKkD,mBAApBK,iBAAiCA;;;;;;;;;;;;;;;;;;;ACvR/D,SAASC,EAAUC,EAAaC,GAC5B,IAAKD,EACD,KAAM,+BAOVC,EAAS,IAAIC,EAAuBF,EAJpCC,EAASA,GAAU,CACfE,KAAM,UAMV,IAAIC,EAAO5C,KAsCX,SAAS6C,EAAaC,GACdA,IACAL,EAAOK,aAAe,WAClBA,IACAA,EAAeL,EAAOK,aAAe,IACrD,GAGQ,IAAIC,EAAW,IAAIC,EAAgBR,EAAaC,IAEhDQ,EAAgB,IAAIF,EAASP,EAAaC,IAC5BS,SAEdC,EAAS,aAEJV,EAAOW,aACRC,QAAQC,IAAI,4BAA6BL,EAAcM,YAAYC,KAAM,mBAAoBf,EAAOE,KAE3G,CAED,SAASc,EAAcC,GAGnB,GAFAA,EAAWA,GAAY,aAElBT,EAAL,CAKA,GAAmB,WAAfL,EAAKe,MAML,OALAf,EAAKgB,uBAELC,YAAW,WACPJ,EAAcC,EACjB,GAAE,GAIY,cAAfd,EAAKe,OAA0BlB,EAAOW,aACtCC,QAAQS,KAAK,qEAAsElB,EAAKe,OAGvFlB,EAAOW,aACRC,QAAQC,IAAI,qBAAuBb,EAAOE,KAAO,YAGjC,QAAhBF,EAAOE,KACPM,EAAcc,KAAKC,IAEnBf,EAAcc,OACdC,KAGJb,EAAS,UA1BR,MAFGc,IA8BJ,SAASD,EAAUE,GACf,GAAKjB,EAAL,CASA9D,OAAOgF,KAAKlB,GAAemB,SAAQ,SAASC,GACN,mBAAvBpB,EAAcoB,KAIzBzB,EAAKyB,GAAOpB,EAAcoB,GAC1C,IAEY,IAAIC,EAAOrB,EAAcqB,KAEzB,IAAKA,EAAM,CACP,IAAIJ,EAGA,KAAM,oBAFNjB,EAAcqB,KAAOA,EAAOJ,CAInC,CAMD,GAJII,IAAS7B,EAAOW,aAChBC,QAAQC,IAAIgB,EAAK3B,KAAM,KAAM4B,EAAYD,EAAKE,OAG9Cd,EAAU,CACV,IAAIe,EAEJ,IACIA,EAAMC,EAAIC,gBAAgBL,EAC9C,CAAkB,MAAOzD,GAAK,CAEe,mBAAlB6C,EAAS5D,KAChB4D,EAAS5D,KAAK8C,EAAM6B,GAEpBf,EAASe,EAEhB,CAEIhC,EAAOmC,iBAIZC,GAAW,SAASC,GAChB,IAAIC,EAAY,CAAA,EAChBA,EAAUtC,EAAOE,KAAO,QAAUmC,EAClCE,EAAYC,MAAMF,EAClC,GA9Ca,KANgC,mBAAlBrB,EAAS5D,KAChB4D,EAAS5D,KAAK8C,EAAM,IAEpBc,EAAS,GAkDpB,CACJ,CA+CD,SAASwB,EAASC,GACdC,aAAY,IAAIC,gBAAiBC,cAAcH,GAClD,CAED,SAASN,EAAWnB,EAAU6B,GAC1B,IAAK7B,EACD,KAAM,4CAGV,IAAIY,EAAOiB,EAAiBA,EAAejB,MAAQrB,GAAiB,CAAE,GAAEqB,KAExE,IAAKA,EAQD,OAPK7B,EAAOW,aACRC,QAAQS,KAAK,iDAGjBD,YAAW,WACPgB,EAAWnB,EAAU6B,EACxB,GAAE,KAIP,GAAsB,oBAAXC,QAA2BC,UAAUC,gBAQzC,CACH,IAAIC,EAAS,IAAIC,WACjBD,EAAOL,cAAchB,GACrBqB,EAAOE,OAAS,SAASC,GACrBpC,EAASoC,EAAMC,OAAOhF,OACtC,CACS,KAdgE,CAC7D,IAAIiF,EAeR,SAA4BC,GACxB,IACI,IAAI3B,EAAOI,EAAIC,gBAAgB,IAAIuB,KAAK,CAACD,EAAUE,WAC/C,qCAAuCF,EAAUzC,KAAO,gBACzD,CACCb,KAAM,4BAGNyD,EAAS,IAAIZ,OAAOlB,GAExB,OADAI,EAAI2B,gBAAgB/B,GACb8B,CACvB,CAAc,MAAOvF,GAAK,CACjB,CA3BmByF,CAAmBpB,GAEnCc,EAAUO,UAAY,SAAST,GAC3BpC,EAASoC,EAAMU,KAC/B,EAEYR,EAAUZ,YAAYd,EAClC,CAqBK,CAED,SAASmC,EAAwBC,GAC7BA,EAAUA,GAAW,EAEF,WAAf9D,EAAKe,MAOU,YAAff,EAAKe,QAIL+C,GAAW9D,EAAK+D,kBAChBlD,EAAcb,EAAKgE,qBAIvBF,GAAW,IAEX7C,YAAW,WACP4C,EAAwBC,EAC3B,GAAE,OAnBC7C,YAAW,WACP4C,EAAwBC,EAC3B,GAAE,IAkBV,CAED,SAASvD,EAASQ,GACTf,IAILA,EAAKe,MAAQA,EAE2B,mBAA7Bf,EAAKiE,eAAe/G,KAC3B8C,EAAKiE,eAAe/G,KAAK8C,EAAMe,GAE/Bf,EAAKiE,eAAelD,GAE3B,CAED,IAUIV,EAVA6D,EAAU,8EAAgFrE,EAAOE,KAAO,aAE5G,SAASsB,KACsB,IAAvBxB,EAAOW,aAIXC,QAAQS,KAAKgD,EAChB,CAID,IAAIC,EAAe,CAYfC,eAtTJ,SAAwBC,GAepB,OAdKxE,EAAOW,aACRC,QAAQC,IAAI,sBAAuBV,EAAKsE,SAGtCD,IAGFxE,EAAS,IAAIC,EAAuBF,EAAayE,IAGhDxE,EAAOW,aACRC,QAAQC,IAAI,qBAAuBb,EAAOE,KAAO,YAGjDM,GACAA,EAAckE,oBACdlE,EAAcC,SAEdC,EAAS,aAELP,EAAK+D,mBACLF,IAEG7D,IAGXC,GAAa,WACLD,EAAK+D,mBACLF,GAEhB,IAEe7D,EACV,EAmSGa,cAAeA,EAYf2D,eA7LJ,WACSnE,EAKc,cAAfL,EAAKe,OAOTR,EAAS,UAETF,EAAcoE,QAET5E,EAAOW,aACRC,QAAQC,IAAI,sBAXPb,EAAOW,aACRC,QAAQS,KAAK,mDAAoDlB,EAAKe,OAN1EM,GAkBP,EAoLGL,gBAlLJ,WACSX,EAKc,WAAfL,EAAKe,OAOTR,EAAS,aAGTF,EAAcqE,SAET7E,EAAOW,aACRC,QAAQC,IAAI,uBAZPb,EAAOW,aACRC,QAAQS,KAAK,oDAAqDlB,EAAKe,OAN3EM,GAmBP,EAwKGpB,aAAcA,EAoBd0E,qBAAsB,SAASZ,EAAmBjD,GAC9C,QAAiC,IAAtBiD,EACP,KAAM,iCAGV,GAAiC,iBAAtBA,EACP,KAAM,sCAMV,OAHA/D,EAAK+D,kBAAoBA,EACzB/D,EAAKgE,mBAAqBlD,GAAY,aAE/B,CACHkD,mBAAoB,SAASlD,GACzBd,EAAKgE,mBAAqBlD,CAC7B,EAER,EAWDyD,kBAAmB,WACVlE,GAKLA,EAAckE,oBAET1E,EAAOW,aACRC,QAAQC,IAAI,+BAPZW,GASP,EAqBDuD,QAAS,WACL,GAAKvE,EAKL,OAAOA,EAAcqB,KAJjBL,GAKP,EAeDY,WAAYA,EAaZ4C,MAAO,WACH,GAAKxE,EAKL,OAAOyB,EAAIC,gBAAgB1B,EAAcqB,MAJrCL,GAKP,EAeDyD,oBAAqB,WACjB,OAAOzE,CACV,EAgBD0E,KAAM,SAASC,GACN3E,EAKL4E,EAAmB5E,EAAcqB,KAAMsD,GAJnC3D,GAKP,EAaD6D,YAAa,SAASpE,GACbT,EAKLV,EAAUuF,YAAYrF,EAAOE,KAAMe,GAJ/BO,GAKP,EAkBD8D,sBAAuB,SAASC,GAC5BvF,EAAOwF,cAAgB,GAGvB,IADA,IAAIvI,EAASsI,EAAkBtI,OACtBH,EAAI,EAAGA,EAAIG,EAAQH,IACxBkD,EAAOwF,cAAc5F,KAAK,CACtB6F,SAAU3I,EACV4I,MAAOH,EAAkBzI,IAGpC,EAgBD+E,KAAM,KAaN8D,WAAY,EAaZC,WAAY,EAcZC,OAAQ,KAWRC,MAAO,WACgB,cAAf3F,EAAKe,OAA0BlB,EAAOW,aACtCC,QAAQS,KAAK,4BAGbb,GAA4D,mBAApCA,EAAckE,mBACtClE,EAAckE,oBAElBlE,EAAgB,KAChBE,EAAS,YACTP,EAAK0B,KAAO,IACf,EAaDuC,eAAgB,SAASlD,GAChBlB,EAAOW,aACRC,QAAQC,IAAI,0BAA2BK,EAE9C,EAiBDA,MAAO,WAUP6E,SAAU,WACN,OAAO5F,EAAKe,KACf,EASD8E,QAAS,WACL,IAAIC,EAAmBjG,EAAOW,YAE9BX,EAAS,CACLW,aAAa,GAEjBR,EAAK2F,QACLpF,EAAS,aACT4D,EAAenE,EAAO,KAElB+F,EAAQC,0BACRD,EAAQC,wBAAwBC,QAChCF,EAAQC,wBAA0B,MAGtCnG,EAAOW,YAAcsF,EAEhBjG,EAAOW,aACRC,QAAQC,IAAI,0BAEnB,EAWD4D,QAAS,SAGb,IAAKlH,KAED,OADA4C,EAAOmE,EACAA,EAIX,IAAK,IAAI+B,KAAQ/B,EACb/G,KAAK8I,GAAQ/B,EAAa+B,GAK9B,OAFAlG,EAAO5C,KAEA+G,CACV;;;;;;;;;;;;;;AA2HD,SAASrE,EAAuBF,EAAaC,GAqDzC,OApDKA,EAAOsG,cAAiBtG,EAAOE,OAC1BF,EAAOuG,OAAWvG,EAAOwG,MAC3BxG,EAAOE,KAAO,QACLF,EAAOuG,QAAUvG,EAAOwG,QACjCxG,EAAOE,KAAO,UAIlBF,EAAOsG,eAAiBtG,EAAOE,OAC3BF,EAAOsG,eAAiBG,GAAkBzG,EAAOsG,eAAiBI,QAAkD,IAAxBC,GAAuC3G,EAAOsG,eAAiBK,EAC3J3G,EAAOE,KAAO,QACPF,EAAOsG,eAAiBM,EAC/B5G,EAAOE,KAAO,MACPF,EAAOsG,eAAiBO,EAC/B7G,EAAOE,KAAO,QACPF,EAAOsG,eAAiBQ,IAC3BC,EAAUhH,EAAa,SAAS9C,QAAU8J,EAAUhH,EAAa,SAAS9C,SAElE8J,EAAUhH,EAAa,SAAS9C,QAAU8J,EAAUhH,EAAa,SAAS9C,OADlF+C,EAAOE,KAAO,QAGP6G,EAAUhH,EAAa,SAAS9C,SAAW8J,EAAUhH,EAAa,SAAS9C,SAClF+C,EAAOE,KAAO,gBAOS,IAAxB4G,GAAgE,oBAAlBE,eAAiC,gBAAiBA,cAAc7J,YAChH6C,EAAOiH,WACRjH,EAAOiH,SAAW,cAGjBjH,EAAOE,OACRF,EAAOE,KAAOF,EAAOiH,SAASC,MAAM,KAAK,IAGxClH,EAAOmH,eAMXnH,EAAOE,OACJF,EAAOiH,WACPjH,EAAOE,KAAOF,EAAOiH,SAASC,MAAM,KAAK,IAExClH,EAAOE,OACRF,EAAOE,KAAO,UAIfF,CACV;;;;;;;;;;;;;;IAoBD,SAASO,EAAgBR,EAAaC,GAClC,IAAIoH,EAkEJ,OA9DIC,GAAYC,GAAUC,KAGtBH,EAAWP,GAGc,oBAAlBG,eAAiC,gBAAiBA,cAAc7J,YAAckK,IACrFD,EAAWN,GAIK,UAAhB9G,EAAOE,OAAqBmH,GAAYE,KACxCH,EAAWX,OAEwB,IAAxBE,GAAiE,oBAAnBa,iBACrDJ,EAAWT,IAKC,QAAhB3G,EAAOE,OACPkH,EAAWR,GAIK,WAAhB5G,EAAOE,OACPkH,EAAWV,GAGXe,KAA+BL,IAAaV,GAAkBU,IAAaR,GAAwC,oBAAlBI,eAAiC,gBAAiBA,cAAc7J,YAC7J4J,EAAUhH,EAAa,SAAS9C,QAAU8J,EAAUhH,EAAa,SAAS9C,UAEtD,UAAhB+C,EAAOE,KACsC,mBAAlC8G,cAAcU,iBAAkCV,cAAcU,gBAAgB,gBACrFN,EAAWN,GAK8B,mBAAlCE,cAAcU,iBAAkCV,cAAcU,gBAAgB,gBACrFN,EAAWN,IAMvB/G,aAAuB4H,OAAS5H,EAAY9C,SAC5CmK,EAAWQ,GAGX5H,EAAOsG,eACPc,EAAWpH,EAAOsG,eAGjBtG,EAAOW,aAAiByG,GAAcA,EAASrG,MAChDH,QAAQC,IAAI,sBAAuBuG,EAASrG,MAAQqG,EAAStG,YAAYC,OAGxEqG,GAAYS,IACbT,EAAWN,GAGRM,CACV;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCD,SAASU,EAAW/H,GAUhBxC,KAAKwK,UAAY,SAASC,GAClBA,IACAjI,EAAciI,EAE1B,EAcIzK,KAAK0K,UAAY,CACb1B,OAAO,EACPC,OAAO,GAUXjJ,KAAKgH,eAAiB,WAClB,IACI+B,EADA2B,EAAY1K,KAAK0K,UAEjBhB,EAAW1J,KAAK0J,UAAY,CAC5BV,MAAO,KACPC,MAAO,KACP0B,IAAK,MAeT,GAZ+B,mBAApBD,EAAU1B,OAAwBkB,MAAgCV,EAAUhH,EAAa,SAAS9C,SACzGgL,EAAU1B,OAAQ,GAGS,mBAApB0B,EAAUzB,OAAwBiB,MAAgCV,EAAUhH,EAAa,SAAS9C,SACzGgL,EAAUzB,OAAQ,GAGO,mBAAlByB,EAAUC,KAAsBT,MAAgCV,EAAUhH,EAAa,SAAS9C,SACvGgL,EAAUC,KAAM,IAGfD,EAAU1B,QAAU0B,EAAUzB,QAAUyB,EAAUC,IACnD,KAAM,sDA0BV,GAvBMD,EAAU1B,QACZD,EAAe,KACgB,mBAApB2B,EAAU1B,QACjBD,EAAe2B,EAAU1B,OAG7BhJ,KAAK4K,cAAgB,IAAIrI,EAAUC,EAAa,CAC5CG,KAAM,QACNyF,WAAYpI,KAAKoI,WACjBC,WAAYrI,KAAKqI,WACjBwC,sBAAuB7K,KAAK6K,uBAAyB,EACrDzH,YAAapD,KAAKoD,YAClB2F,aAAcA,EACdW,SAAUA,EAASV,MACnB8B,UAAW9K,KAAK8K,UAChBC,YAAa/K,KAAK+K,cAGjBL,EAAUzB,OACXjJ,KAAK4K,cAAc5D,kBAIrB0D,EAAUzB,MAAO,CACnBF,EAAe,KACgB,mBAApB2B,EAAUzB,QACjBF,EAAe2B,EAAUzB,OAG7B,IAAI+B,EAAYxI,EAEhB,GAAI0H,KAAiCQ,EAAU1B,OAAoC,mBAApB0B,EAAU1B,MAAsB,CAC3F,IAAIiC,EAAazB,EAAUhH,EAAa,SAAS,GAE7C0I,IACAF,EAAY,IAAIG,GACNC,SAASH,GAEflC,GAAgBA,IAAiBG,IAGjCH,EAAeQ,KAGnByB,EAAY,IAAIG,GACNC,SAASH,EAE1B,CAEDjL,KAAKqL,cAAgB,IAAI9I,EAAUyI,EAAW,CAC1CrI,KAAM,QACNsG,MAAOjJ,KAAKiJ,MACZqC,OAAQtL,KAAKsL,OACbC,cAAevL,KAAKuL,eAAiB,GACrCnI,YAAapD,KAAKoD,YAClB2F,aAAcA,EACdW,SAAUA,EAAST,MACnB6B,UAAW9K,KAAK8K,UAChBC,YAAa/K,KAAK+K,YAClBS,WAAYxL,KAAKwL,WACjBC,gBAAiBzL,KAAKyL,gBACtBC,UAAW1L,KAAK0L,UAChBC,QAAS3L,KAAK2L,UAGbjB,EAAU1B,OACXhJ,KAAKqL,cAAcrE,gBAE1B,CAED,GAAM0D,EAAU1B,OAAW0B,EAAUzB,MAAO,CACxC,IAAIrG,EAAO5C,KAEP4L,GAAmD,IAAhC1B,KAEnBQ,EAAU1B,iBAAiBM,GAAyBoB,EAAUzB,QAEnC,IAApByB,EAAU1B,QAAsC,IAApB0B,EAAUzB,OAAkByB,EAAU1B,QAAU0B,EAAUzB,SAD7F2C,GAAmB,IAKE,IAArBA,GACAhJ,EAAKgI,cAAgB,KACrBhI,EAAKyI,cAAcrE,kBAEnBpE,EAAKyI,cAAcxI,cAAa,WAC5BD,EAAKgI,cAAc/H,cAAa,WAE5BD,EAAKyI,cAAcrE,iBACnBpE,EAAKgI,cAAc5D,gBAC3C,GACA,GAES,CAEK0D,EAAUC,MACZ5B,EAAe,KACc,mBAAlB2B,EAAUC,MACjB5B,EAAe2B,EAAUC,KAE7B3K,KAAK6L,YAAc,IAAItJ,EAAUC,EAAa,CAC1CG,KAAM,MACN+I,UAAW1L,KAAK0L,WAAa,IAC7BI,QAAS9L,KAAK8L,SAAW,GACzB1I,YAAapD,KAAKoD,YAClB2F,aAAcA,EACdW,SAAUA,EAASiB,MAEvB3K,KAAK6L,YAAY7E,iBAE7B,EAcIhH,KAAKyD,cAAgB,SAASC,GAC1BA,EAAWA,GAAY,aAEnB1D,KAAK4K,eACL5K,KAAK4K,cAAcnH,eAAc,SAASsI,GACtCrI,EAASqI,EAAS,QAClC,IAGY/L,KAAKqL,eACLrL,KAAKqL,cAAc5H,eAAc,SAASsI,GACtCrI,EAASqI,EAAS,QAClC,IAGY/L,KAAK6L,aACL7L,KAAK6L,YAAYpI,eAAc,SAASsI,GACpCrI,EAASqI,EAAS,MAClC,GAEA,EASI/L,KAAKoH,eAAiB,WACdpH,KAAK4K,eACL5K,KAAK4K,cAAcxD,iBAGnBpH,KAAKqL,eACLrL,KAAKqL,cAAcjE,iBAGnBpH,KAAK6L,aACL7L,KAAK6L,YAAYzE,gBAE7B,EASIpH,KAAK4D,gBAAkB,WACf5D,KAAK4K,eACL5K,KAAK4K,cAAchH,kBAGnB5D,KAAKqL,eACLrL,KAAKqL,cAAczH,kBAGnB5D,KAAK6L,aACL7L,KAAK6L,YAAYjI,iBAE7B,EAiBI5D,KAAKwH,QAAU,SAAS9D,GACpB,IAAIsI,EAAS,CAAA,EAkBb,OAhBIhM,KAAK4K,gBACLoB,EAAOhD,MAAQhJ,KAAK4K,cAAcpD,WAGlCxH,KAAKqL,gBACLW,EAAO/C,MAAQjJ,KAAKqL,cAAc7D,WAGlCxH,KAAK6L,cACLG,EAAOrB,IAAM3K,KAAK6L,YAAYrE,WAG9B9D,GACAA,EAASsI,GAGNA,CACf,EASIhM,KAAKyI,QAAU,WACPzI,KAAK4K,gBACL5K,KAAK4K,cAAcnC,UACnBzI,KAAK4K,cAAgB,MAGrB5K,KAAKqL,gBACLrL,KAAKqL,cAAc5C,UACnBzI,KAAKqL,cAAgB,MAGrBrL,KAAK6L,cACL7L,KAAK6L,YAAYpD,UACjBzI,KAAK6L,YAAc,KAE/B,EAcI7L,KAAK6E,WAAa,SAASnB,GA0BvB,SAASmB,EAAWP,EAAM2H,GACtB,GAAsB,oBAAXzG,OAAwB,CAC/B,IAAIQ,EAkBZ,SAA4BC,GACxB,IAOIxB,EAPAH,EAAOI,EAAIC,gBAAgB,IAAIuB,KAAK,CAACD,EAAUE,WAC/C,qCAAuCF,EAAUzC,KAAO,gBACzD,CACCb,KAAM,4BAGNyD,EAAS,IAAIZ,OAAOlB,GAExB,QAAmB,IAARI,EACPD,EAAMC,MACH,IAAyB,oBAAdwH,UAGd,KAAM,sCAFNzH,EAAMyH,SAGT,CAED,OADAzH,EAAI4B,gBAAgB/B,GACb8B,CACV,CApCuBE,EAAmB,SAAkBnB,GACjDC,aAAY,IAAIC,gBAAiBC,cAAcH,GACnE,IAEgBa,EAAUO,UAAY,SAAST,GAC3BmG,EAAWnG,EAAMU,KACrC,EAEgBR,EAAUZ,YAAYd,EACtC,KAAmB,CACH,IAAIqB,EAAS,IAAIC,WACjBD,EAAOL,cAAchB,GACrBqB,EAAOE,OAAS,SAASC,GACrBmG,EAAWnG,EAAMC,OAAOhF,OAC5C,CACa,CACJ,CA3CDf,KAAKwH,SAAQ,SAASlD,GACdA,EAAK0E,OAAS1E,EAAK2E,MACnBpE,EAAWP,EAAK0E,OAAO,SAASmD,GAC5BtH,EAAWP,EAAK2E,OAAO,SAASmD,GAC5B1I,EAAS,CACLsF,MAAOmD,EACPlD,MAAOmD,GAEnC,GACA,IACuB9H,EAAK0E,MACZnE,EAAWP,EAAK0E,OAAO,SAASmD,GAC5BzI,EAAS,CACLsF,MAAOmD,GAE/B,IACuB7H,EAAK2E,OACZpE,EAAWP,EAAK2E,OAAO,SAASmD,GAC5B1I,EAAS,CACLuF,MAAOmD,GAE/B,GAEA,GAyCA,EASIpM,KAAKqM,YAAc,WACf9J,EAAU8J,YAAY,CAClBrD,MAAOhJ,KAAK4K,cACZ3B,MAAOjJ,KAAKqL,cACZV,IAAK3K,KAAK6L,aAEtB,EAcI7L,KAAK2H,KAAO,SAAS2E,IACjBA,EAAOA,GAAQ,CACXtD,OAAO,EACPC,OAAO,EACP0B,KAAK,IAGE3B,OAAShJ,KAAK4K,eACrB5K,KAAK4K,cAAcjD,KAA2B,iBAAf2E,EAAKtD,MAAqBsD,EAAKtD,MAAQ,IAGpEsD,EAAKrD,OAASjJ,KAAKqL,eACrBrL,KAAKqL,cAAc1D,KAA2B,iBAAf2E,EAAKrD,MAAqBqD,EAAKrD,MAAQ,IAEpEqD,EAAK3B,KAAO3K,KAAK6L,aACnB7L,KAAK6L,YAAYlE,KAAyB,iBAAb2E,EAAK3B,IAAmB2B,EAAK3B,IAAM,GAE5E,CACC,CA9tBDpI,EAAU2E,QAAU,QAGhBqF,EAAAC,QAAiBjK,EASrBA,EAAUuF,YAAc,SAASnF,EAAMe,GACnC,IAAKA,EACD,KAAM,yBAGVL,QAAQC,IAAI,qBAAgC,QAATX,EAAiB,QAAUA,EAAO,UAAY,eACjFqC,EAAYyH,OAAM,SAAS3H,EAAS4H,GACnB,QAAT/J,GAAkB+J,IAAU/J,EAAO,QAAUe,GAC7CA,EAASoB,GAGA,QAATnC,GAAkBe,GAClBA,EAASoB,EAAS4H,EAAMC,QAAQ,OAAQ,IAEpD,GACA,EAcApK,EAAU8J,YAAc,SAASO,GAC7BvJ,QAAQC,IAAI,sCACZsJ,EAAUA,GAAW,IACT5D,OAAS4D,EAAQ3D,OAAS2D,EAAQjC,IAC1CiC,EAAQ5D,MAAMnE,YAAW,SAASgI,GAC9BD,EAAQ3D,MAAMpE,YAAW,SAASiI,GAC9BF,EAAQjC,IAAI9F,YAAW,SAASkI,GAC5B/H,EAAYC,MAAM,CACd+H,UAAWH,EACXI,UAAWH,EACXI,QAASH,GAEjC,GACA,GACA,IACeH,EAAQ5D,OAAS4D,EAAQ3D,MAChC2D,EAAQ5D,MAAMnE,YAAW,SAASgI,GAC9BD,EAAQ3D,MAAMpE,YAAW,SAASiI,GAC9B9H,EAAYC,MAAM,CACd+H,UAAWH,EACXI,UAAWH,GAE/B,GACA,IACeF,EAAQ5D,OAAS4D,EAAQjC,IAChCiC,EAAQ5D,MAAMnE,YAAW,SAASgI,GAC9BD,EAAQjC,IAAI9F,YAAW,SAASkI,GAC5B/H,EAAYC,MAAM,CACd+H,UAAWH,EACXK,QAASH,GAE7B,GACA,IACeH,EAAQ3D,OAAS2D,EAAQjC,IAChCiC,EAAQ3D,MAAMpE,YAAW,SAASiI,GAC9BF,EAAQjC,IAAI9F,YAAW,SAASkI,GAC5B/H,EAAYC,MAAM,CACdgI,UAAWH,EACXI,QAASH,GAE7B,GACA,IACeH,EAAQ5D,MACf4D,EAAQ5D,MAAMnE,YAAW,SAASgI,GAC9B7H,EAAYC,MAAM,CACd+H,UAAWH,GAE3B,IACeD,EAAQ3D,MACf2D,EAAQ3D,MAAMpE,YAAW,SAASiI,GAC9B9H,EAAYC,MAAM,CACdgI,UAAWH,GAE3B,IACeF,EAAQjC,KACfiC,EAAQjC,IAAI9F,YAAW,SAASkI,GAC5B/H,EAAYC,MAAM,CACdiI,QAASH,GAEzB,GAEA,EAuoBAxC,EAAWzC,YAAcvF,EAAUuF,YAcnCyC,EAAW8B,YAAc9J,EAAU8J,iBAEV,IAAd9J,IACPA,EAAUgI,WAAaA,GAG3B,IAEU4C,UAwFW,IAAXC,EAAyBA,EAAS,OAnFlB,oBAAXC,aAIW,IAAXD,IAIXA,EAAO3H,UAAY,CACf6H,UAhBmB,sFAiBnBC,aAAc,WAAa,GAG1BH,EAAO/J,UACR+J,EAAO/J,QAAU,SAGa,IAAvB+J,EAAO/J,QAAQC,UAAuD,IAAzB8J,EAAO/J,QAAQmK,QACnEJ,EAAO/J,QAAQmK,MAAQJ,EAAO/J,QAAQC,IAAM8J,EAAO/J,QAAQC,KAAO,WAC9DD,QAAQC,IAAI7D,UACxB,GAG4B,oBAAbgO,WAEPN,EAAKM,SAAW,CACZC,gBAAiB,CACbC,YAAa,WACT,MAAO,EACV,IAITF,SAASG,cAAgBH,SAASI,cAAgBJ,SAASK,iBAAmB,WAC1E,IAAIC,EAAM,CACNC,WAAY,WACR,OAAOD,CACV,EACDE,KAAM,WAAa,EACnB5G,MAAO,WAAa,EACpB6G,UAAW,WAAa,EACxBC,UAAW,WACP,MAAO,EACV,EACDC,MAAO,CAAE,GAEb,OAAOL,CACnB,EAEQZ,EAAKkB,iBAAmB,cAGJ,oBAAbC,WAEPnB,EAAKmB,SAAW,CACZC,SAAU,QACVC,KAAM,GACNC,KAAM,KAIQ,oBAAXC,SAEPvB,EAAKuB,OAAS,CACVC,MAAO,EACPC,OAAQ,SAIG,IAARlK,IAEPyI,EAAKzI,IAAM,CACPC,gBAAiB,WACb,MAAO,EACV,EACD0B,gBAAiB,WACb,MAAO,EACV,IAKT8G,EAAKE,OAASD,GASlB,IAAIyB,EAAwBxB,OAAOwB,sBACnC,QAAqC,IAA1BA,EACP,GAA2C,oBAAhCC,4BAEPD,EAAwBC,iCACrB,GAAwC,oBAA7BC,yBAEdF,EAAwBE,8BACrB,GAAuC,oBAA5BC,wBAEdH,EAAwBG,6BACrB,QAAqC,IAA1BH,EAAuC,CAErD,IAAII,EAAW,EAGfJ,EAAwB,SAASnL,EAAUwL,GACvC,IAAIC,GAAW,IAAIC,MAAOC,UACtBC,EAAaC,KAAKC,IAAI,EAAG,IAAML,EAAWF,IAC1CQ,EAAK5L,YAAW,WAChBH,EAASyL,EAAWG,EACvB,GAAEA,GAEH,OADAL,EAAWE,EAAWG,EACfG,CACnB,CACK,CAIL,IAAIC,EAAuBrC,OAAOqC,0BACE,IAAzBA,IACmC,oBAA/BC,2BAEPD,EAAuBC,2BACmB,oBAA5BC,wBAEdF,EAAuBE,wBACkB,oBAA3BC,uBAEdH,EAAuBG,4BACgB,IAAzBH,IAEdA,EAAuB,SAASD,GAC5BK,aAAaL,EACzB,IAKA,IAAIM,EAAe1C,OAAO0C,kBAEE,IAAjBA,IAC2B,oBAAvBC,qBAEPD,EAAeC,oBAGY,oBAApBC,kBAEPF,EAAeE,kBAKvB,IAAIvL,EAAM2I,OAAO3I,SAEE,IAARA,GAA4C,oBAAdwH,YAErCxH,EAAMwH,WAGe,oBAAdzG,gBAA+D,IAA3BA,UAAU8H,oBACT,IAAjC9H,UAAUyK,qBACjBzK,UAAU8H,aAAe9H,UAAUyK,yBAGE,IAA9BzK,UAAUC,kBACjBD,UAAU8H,aAAe9H,UAAUC,kBAI3C,IAAIqE,KAAkD,IAAzCtE,UAAU6H,UAAU6C,QAAQ,UAAqB1K,UAAU2K,aAAgB3K,UAAU4K,kBAC9FrG,IAAYqD,OAAOiD,QAAkD,IAAzC7K,UAAU6H,UAAU6C,QAAQ,QACxDjF,EAAYzF,UAAU6H,UAAUiD,cAAcJ,QAAQ,YAAc,GAAM,aAAc9C,QAAW,OAAOmD,KAAK/K,UAAU6H,WACzHxD,GAAaE,IAAYD,KAAYtE,UAAUyK,oBAAuBO,MAA0E,IAA1DhL,UAAU6H,UAAUiD,cAAcJ,QAAQ,WAEhI7F,EAAW,iCAAiCkG,KAAK/K,UAAU6H,WAE3DhD,IAAaR,IAAsD,IAA1CrE,UAAU6H,UAAU6C,QAAQ,WACrD7F,GAAW,EACXR,GAAW,GAGf,IAAIqB,EAAckC,OAAOlC,YA2BzB,SAAS5G,EAAYmM,GAGjB,GAAc,IAAVA,EACA,MAAO,UAEX,IAAInR,EAAIoR,SAASpB,KAAKqB,MAAMrB,KAAKjM,IAAIoN,GAASnB,KAAKjM,IAL3C,MAKoD,IAC5D,OAAQoN,EAAQnB,KAAKsB,IANb,IAMoBtR,IAAIuR,YAAY,GAAK,IALrC,CAAC,QAAS,KAAM,KAAM,KAAM,MAKqBvR,EAChE,CASD,SAASsI,EAAmBkJ,EAAMnJ,GAC9B,IAAKmJ,EACD,KAAM,2BAGV,IAAKA,EAAKpO,KACN,IACIoO,EAAKpO,KAAO,YACxB,CAAU,MAAO9B,GAAK,CAGlB,IAAImQ,GAAiBD,EAAKpO,MAAQ,cAAcgH,MAAM,KAAK,GAK3D,IAJoC,IAAhCqH,EAAcb,QAAQ,OAEtBa,EAAgBA,EAAcrH,MAAM,KAAK,IAEzC/B,IAAuC,IAA3BA,EAASuI,QAAQ,KAAa,CAC1C,IAAIc,EAAWrJ,EAAS+B,MAAM,KAC9B/B,EAAWqJ,EAAS,GACpBD,EAAgBC,EAAS,EAC5B,CAED,IAAIC,GAAgBtJ,GAAa2H,KAAK4B,MAAsB,WAAhB5B,KAAK6B,UAAyB,WAAc,IAAMJ,EAE9F,QAA0C,IAA/BvL,UAAU4K,iBACjB,OAAO5K,UAAU4K,iBAAiBU,EAAMG,GACrC,QAAoC,IAAzBzL,UAAU2K,WACxB,OAAO3K,UAAU2K,WAAWW,EAAMG,GAGtC,IAAIG,EAAY5D,SAASG,cAAc,KACvCyD,EAAU7C,KAAO9J,EAAIC,gBAAgBoM,GACrCM,EAAUC,SAAWJ,EAErBG,EAAUjD,MAAQ,6CACjBX,SAAStM,MAAQsM,SAASC,iBAAiBC,YAAY0D,GAEzB,mBAApBA,EAAUE,MACjBF,EAAUE,SAEVF,EAAUtL,OAAS,SACnBsL,EAAUG,cAAc,IAAIC,WAAW,QAAS,CAC5CC,KAAMrE,OACNsE,SAAS,EACTC,YAAY,MAIpBlN,EAAI2B,gBAAgBgL,EAAU7C,KACjC,CAKD,SAASiC,IAEL,MAAsB,oBAAXpD,QAAoD,iBAAnBA,OAAOwE,SAAgD,aAAxBxE,OAAOwE,QAAQlP,SAKnE,oBAAZkP,SAAuD,iBAArBA,QAAQC,WAA2BD,QAAQC,SAASC,WAKxE,iBAAdtM,WAAyD,iBAAxBA,UAAU6H,WAA0B7H,UAAU6H,UAAU6C,QAAQ,aAAe,EAK9H,CAED,SAAS3G,EAAUwI,EAAQC,GACvB,OAAKD,GAAWA,EAAOxI,UAIhBwI,EAAOxI,YAAY0I,QAAO,SAAS7S,GACtC,OAAOA,EAAE4S,QAAUA,GAAQ,QACnC,IALe,EAMd,CAED,SAASE,EAAaH,EAAQ9C,GACtB,cAAeA,EACfA,EAAQkD,UAAYJ,EACb,iBAAkB9C,EACzBA,EAAQmD,aAAeL,EAEvB9C,EAAQkD,UAAYJ,CAE3B,MArI0B,IAAhB7G,GAA4D,oBAAtBmH,oBAC7CnH,EAAcmH,wBAIS,IAAhBnH,QAEmC,IAA/BA,EAAYvL,UAAUmE,OAC7BoH,EAAYvL,UAAUmE,KAAO,WACzB/D,KAAKwJ,YAAYpF,SAAQ,SAASmO,GAC9BA,EAAMxO,MACtB,GACA,QA8JyB,IAAdxB,IACPA,EAAUsF,mBAAqBA,EAC/BtF,EAAUiH,UAAYA,EACtBjH,EAAUiQ,gBA/Bd,SAAyBC,EAAW/O,GAEhC,GAAoB,oBAATgP,KACP,MAAM,IAAIC,MAAM,0DAGpB,IAAIhN,EAAS,IAAI+M,KAAKE,OAClBC,EAAU,IAAIH,KAAKI,QACnBC,EAAQL,KAAKK,MAEbC,EAAa,IAAIpN,WACrBoN,EAAWnN,OAAS,SAAShF,GACVgS,EAAQI,OAAOjT,KAAKe,QAC1BqD,SAAQ,SAAS8K,GACtBvJ,EAAOuN,KAAKhE,EACxB,IACQvJ,EAAO5B,OACP,IAAIoP,EAAqBJ,EAAMK,qBAAqBzN,EAAO0N,UAAW1N,EAAOuC,SAAUvC,EAAO2N,MAC1FnS,EAAOnB,KAAKe,OAAOwS,MAAM5N,EAAO6N,cAChCC,EAAU,IAAIvN,KAAK,CAACiN,EAAoBhS,GAAO,CAC/CwB,KAAM,eAGVe,EAAS+P,EACjB,EACIT,EAAWU,kBAAkBjB,EAChC,EAMGlQ,EAAUgC,YAAcA,EACxBhC,EAAUkO,WAAaA;;;;;;;;;;AAgB3B,IAAI9H,EAAU,CAAA,EAYd,SAASuB,IACL,GAAIgB,GAAaZ,GAAYP,EACzB,OAAO,EAIX,IAGgB4J,EAAWC,EAHvBC,EAAOpO,UAAU6H,UACjBwG,EAAc,GAAKC,WAAWtO,UAAUuO,YACxCC,EAAetD,SAASlL,UAAUuO,WAAY,IAwBlD,OArBIlK,GAAYE,KACZ2J,EAAYE,EAAK1D,QAAQ,UACzB2D,EAAcD,EAAKK,UAAUP,EAAY,KAIJ,KAApCC,EAAKE,EAAY3D,QAAQ,QAC1B2D,EAAcA,EAAYI,UAAU,EAAGN,KAGF,KAApCA,EAAKE,EAAY3D,QAAQ,QAC1B2D,EAAcA,EAAYI,UAAU,EAAGN,IAG3CK,EAAetD,SAAS,GAAKmD,EAAa,IAEtCK,MAAMF,KACNH,EAAc,GAAKC,WAAWtO,UAAUuO,YACxCC,EAAetD,SAASlL,UAAUuO,WAAY,KAG3CC,GAAgB,EAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoCD,SAAS1K,EAAoB/G,EAAaC,GACtC,IAAIG,EAAO5C,KAEX,QAA2B,IAAhBwC,EACP,KAAM,4CAGV,GAA6B,oBAAlBiH,cACP,KAAM,6HAQV,GAAoB,WALpBhH,EAASA,GAAU,CAEfiH,SAAU,eAGH/G,KAAkB,CAErB,IAAIqP,EADR,GAAIxI,EAAUhH,EAAa,SAAS9C,QAAU8J,EAAUhH,EAAa,SAAS9C,OAEpE+F,UAAUC,iBACZsM,EAAS,IAAI7G,GACNC,SAAS5B,EAAUhH,EAAa,SAAS,IAGhDwP,EAAS,IAAI7G,EAAY3B,EAAUhH,EAAa,UAEpDA,EAAcwP,EAGbvP,EAAOiH,WAA2E,IAA/DjH,EAAOiH,SAASvD,WAAWoK,cAAcJ,QAAQ,WACrE1N,EAAOiH,SAAWI,EAAW,aAAe,aAG5CrH,EAAOiH,UAAyD,cAA7CjH,EAAOiH,SAASvD,WAAWoK,eAAmC9K,UAAUC,kBAE3FjD,EAAOiH,SAAW,YAEzB,CAED,IA4TIzG,EA5TAmR,EAAe,GAgNnB,SAASC,IACLzR,EAAK0R,WAAWjS,MAAK,IAAI+M,MAAOC,WAEE,mBAAvB5M,EAAOsI,aACdtI,EAAOsI,YAAYnI,EAAK0R,WAAW1R,EAAK0R,WAAW5U,OAAS,GAAIkD,EAAK0R,WAE5E,CAED,SAASC,EAAYC,GACjB,OAAIvR,GAAiBA,EAAcyG,SACxBzG,EAAcyG,SAGlB8K,EAAa9K,UAAY,YACnC,CAuFD,SAAS+K,IACLL,EAAe,GACfnR,EAAgB,KAChBL,EAAK0R,WAAa,EACrB,CA/SDtU,KAAK0U,gBAAkB,WACnB,OAAON,CACf,EASIpU,KAAKkD,OAAS,WAEVN,EAAK0B,KAAO,KACZ1B,EAAKuE,oBACLvE,EAAK0R,WAAa,GAClBK,EAAY,GACZP,EAAe,GAEf,IAAIQ,EAAgBnS,EAEfA,EAAOW,aACRC,QAAQC,IAAI,mDAAoDsR,GAGhE3R,IAEAA,EAAgB,MAGhB6G,IAAaI,MAEb0K,EAAgB,aAGyB,mBAAlCnL,cAAcU,iBAAkCyK,EAAclL,WAChED,cAAcU,gBAAgByK,EAAclL,YACxCjH,EAAOW,aACRC,QAAQS,KAAK,qDAAsD8Q,EAAclL,UAGrFkL,EAAclL,SAA2B,UAAhBjH,EAAOE,KAAmB,aAAe,eAK1E,IACIM,EAAgB,IAAIwG,cAAcjH,EAAaoS,GAG/CnS,EAAOiH,SAAWkL,EAAclL,QACnC,CAAC,MAAO7I,GAELoC,EAAgB,IAAIwG,cAAcjH,EACrC,CAGGoS,EAAclL,WAAaD,cAAcU,iBAAmB,sBAAuBlH,IAA6E,IAA5DA,EAAc4R,kBAAkBD,EAAclL,YAC7IjH,EAAOW,aACRC,QAAQS,KAAK,qDAAsD8Q,EAAclL,WAKzFzG,EAAc6R,gBAAkB,SAASjU,GAKrC,GAJIA,EAAE2F,MACFmO,EAAUtS,KAAK,oBAAsBkC,EAAY1D,EAAE2F,KAAKhC,OAG5B,iBAArB/B,EAAOqI,WAgBbjK,EAAE2F,OAAS3F,EAAE2F,KAAKhC,MAAQ3D,EAAE2F,KAAKhC,KAAO,KAAO5B,EAAK0B,KAGjD1B,EAAKmS,oBACLnS,EAAKmS,kBAAkB,IAAI7O,KAAK,GAAI,CAChCvD,KAAM4R,EAAYK,MAEtBhS,EAAKmS,kBAAoB,OAKjCnS,EAAK0B,KAAO7B,EAAOuS,cAAgBnU,EAAE2F,KAAO,IAAIN,KAAK,CAACrF,EAAE2F,MAAO,CAC3D7D,KAAM4R,EAAYK,KAGlBhS,EAAKmS,oBACLnS,EAAKmS,kBAAkBnS,EAAK0B,MAC5B1B,EAAKmS,kBAAoB,YAjCzB,GAAIlU,EAAE2F,MAAQ3F,EAAE2F,KAAKhC,OACjB4P,EAAa/R,KAAKxB,EAAE2F,MACpB6N,IAEsC,mBAA3B5R,EAAOqS,iBAAgC,CAE9C,IAAIxQ,EAAO7B,EAAOuS,cAAgBnU,EAAE2F,KAAO,IAAIN,KAAK,CAACrF,EAAE2F,MAAO,CAC1D7D,KAAM4R,EAAYK,KAEtBnS,EAAOqS,gBAAgBxQ,EAC1B,CAyBrB,EAEQrB,EAAcgS,QAAU,WACpBN,EAAUtS,KAAK,UAC3B,EAEQY,EAAciS,QAAU,WACpBP,EAAUtS,KAAK,SAC3B,EAEQY,EAAckS,SAAW,WACrBR,EAAUtS,KAAK,UAC3B,EAEQY,EAAcmS,OAAS,WACnBT,EAAUtS,KAAK,UAC3B,EAEQY,EAAcoS,QAAU,SAAS7H,GACxBA,IAIAA,EAAMhK,OACPgK,EAAMhK,KAAO,gBAGjBmR,EAAUtS,KAAK,UAAYmL,GAEtB/K,EAAOW,eAE6D,IAAjEoK,EAAMhK,KAAK2C,WAAWoK,cAAcJ,QAAQ,gBAC5C9M,QAAQmK,MAAM,iGAAkGA,IACxC,IAAjEA,EAAMhK,KAAK2C,WAAWoK,cAAcJ,QAAQ,gBACnD9M,QAAQmK,MAAM,cAAeoH,EAAclL,SAAU,sBAAuB8D,IACR,IAA7DA,EAAMhK,KAAK2C,WAAWoK,cAAcJ,QAAQ,YACnD9M,QAAQmK,MAAM,+BAAgCA,GAI1B,gBAAfA,EAAMhK,KACXH,QAAQmK,MAAM,4IAA6IA,GACrI,8BAAfA,EAAMhK,KACbH,QAAQmK,MAAM,sQAAuQA,GAC/P,wBAAfA,EAAMhK,KACbH,QAAQmK,MAAM,yJAA0JA,GAClJ,iBAAfA,EAAMhK,KACbH,QAAQmK,MAAM,+EAAgFA,GAE9FnK,QAAQmK,MAAM,sBAAuBA,IAI7C,SAAU8H,GACN,IAAK1S,EAAK2S,iBAAmBtS,GAAyC,aAAxBA,EAAcU,MAKxD,cAJOlB,EAAO+S,eAGdvS,EAAcwS,MAAM,KAIxB5R,gBATJ,EASuB,IACtB,CAVD,GAY4B,aAAxBZ,EAAcU,OAAgD,YAAxBV,EAAcU,OACpDV,EAAcc,OAE9B,EAEwC,iBAArBtB,EAAOqI,WACduJ,IACApR,EAAcwS,MAAMhT,EAAOqI,YAK3B7H,EAAcwS,MAAM,MAGpBhT,EAAOK,cACPL,EAAOK,cAEnB,EAQI9C,KAAKsU,WAAa,GA4BlBtU,KAAK+D,KAAO,SAASL,GACjBA,EAAWA,GAAY,aAEvBd,EAAK2S,iBAAkB,EAElBtS,IAILjD,KAAK+U,kBAAoBrR,EAEG,cAAxBT,EAAcU,OACdV,EAAcc,OAGc,iBAArBtB,EAAOqI,WACdjH,YAAW,WACPjB,EAAK0B,KAAO,IAAI4B,KAAKkO,EAAc,CAC/BzR,KAAM4R,EAAY9R,KAGtBG,EAAKmS,kBAAkBnS,EAAK0B,KAC/B,GAAE,KAEf,EASItE,KAAKqH,MAAQ,WACJpE,GAIuB,cAAxBA,EAAcU,OACdV,EAAcoE,OAE1B,EASIrH,KAAKsH,OAAS,WACLrE,GAIuB,WAAxBA,EAAcU,OACdV,EAAcqE,QAE1B,EASItH,KAAKmH,kBAAoB,WACjBlE,GAAyC,cAAxBA,EAAcU,OAC/Bf,EAAKmB,KAAK0Q,GAGdA,GACR,EAsBIzU,KAAK0H,oBAAsB,WACvB,OAAOzE,CACf,EAuBIjD,KAAKsE,KAAO,KAWZtE,KAAKwI,SAAW,WACZ,OAAKvF,GAIEA,EAAcU,OAHV,UAInB,EAGI,IAAIgR,EAAY,GAUhB3U,KAAK0V,aAAe,WAChB,OAAOf,CACf,OAMiD,IAAlClS,EAAOkT,yBACdlT,EAAOkT,wBAAyB,GAGhC/S,EAAO5C,MAIX,SAAUsV,IACN,GAAKrS,IAAmD,IAAlCR,EAAOkT,uBAI7B,OAA8B,IAxElC,WACI,GAAI,WAAYnT,GACZ,IAAKA,EAAYoT,OACb,OAAO,OAER,GAAI,UAAWpT,GACdA,EAAYqT,MACZ,OAAO,EAGf,OAAO,CACV,CA6DOC,IACKrT,EAAOW,aACRC,QAAQC,IAAI,mCAEhBV,EAAKmB,aAITF,WAAWyR,EAAQ,IACtB,CAdD,GAiBAtV,KAAKwD,KAAO,sBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,CACC;;;;;;;;;;;;;;;;;;;;;AAgCD,SAAS8F,EAAoB9G,EAAaC,GACtC,IAAK+G,EAAUhH,EAAa,SAAS9C,OACjC,KAAM,mCAKV,IAOIqW,EAPAnT,EAAO5C,KAGPgW,EAAc,GACdC,EAAe,GACfC,GAAY,EACZC,EAAkB,EAGlBtL,EAAwB,EAYxBuL,GAvBJ3T,EAASA,GAAU,IAuBU2T,gBA2B7B,SAASN,IACL,IAAsC,IAAlCrT,EAAOkT,uBAEP,OAAO,EAGX,GAAI,WAAYnT,GACZ,IAAKA,EAAYoT,OACb,OAAO,OAER,GAAI,UAAWpT,GACdA,EAAYqT,MACZ,OAAO,EAGf,OAAO,CACV,CAwBD,SAASQ,EAAsB5T,EAAQiB,GACnC,SAAS4S,EAAkB7T,EAAQ8T,GAC/B,IA2FIC,EA3FA3L,EAAwBpI,EAAOoI,sBAG/B4L,EAAchU,EAAOgU,YAAYlD,MAAM,GACvCmD,EAAejU,EAAOiU,aAAanD,MAAM,GACzClL,EAAa5F,EAAO4F,WACpBsO,EAA4BlU,EAAOkU,0BACnCP,EAAkB3T,EAAO2T,gBA2B7B,SAASQ,EAAiBpQ,EAAMqQ,EAAeC,GAC3C,IAAIC,EAAWxH,KAAK4B,MAAM3K,EAAK9G,QAAUmX,EAAgBC,IACrDE,EAAU,GACVC,EAAeC,QAAQ1Q,EAAK9G,OAAS,IAAMqX,EAAW,IAC1DC,EAAQ,GAAKxQ,EAAK,GAClB,IAAK,IAAIjH,EAAI,EAAGA,EAAIwX,EAAW,EAAGxX,IAAK,CACnC,IAAI4X,EAAM5X,EAAI0X,EACVG,EAASF,OAAO3H,KAAKqB,MAAMuG,IAAME,UACjCC,EAAQJ,OAAO3H,KAAKgI,KAAKJ,IAAME,UAC/BG,EAAUL,EAAMC,EACpBJ,EAAQzX,GAAKkY,EAAkBjR,EAAK4Q,GAAS5Q,EAAK8Q,GAAQE,EAC7D,CAED,OADAR,EAAQD,EAAW,GAAKvQ,EAAKA,EAAK9G,OAAS,GACpCsX,CACV,CAED,SAASS,EAAkBL,EAAQE,EAAOE,GACtC,OAAOJ,GAAUE,EAAQF,GAAUI,CACtC,CAED,SAASE,EAAaC,EAAeC,GAKjC,IAJA,IAAI7W,EAAS,IAAI8W,aAAaD,GAC1BE,EAAS,EACTC,EAAMJ,EAAcjY,OAEfH,EAAI,EAAGA,EAAIwY,EAAKxY,IAAK,CAC1B,IAAI+I,EAASqP,EAAcpY,GAC3BwB,EAAOiX,IAAI1P,EAAQwP,GACnBA,GAAUxP,EAAO5I,MACpB,CAED,OAAOqB,CACV,CAiBD,SAASkX,EAAcvG,EAAMoG,EAAQI,GAEjC,IADA,IAAIH,EAAMG,EAAOxY,OACRH,EAAI,EAAGA,EAAIwY,EAAKxY,IACrBmS,EAAKyG,SAASL,EAASvY,EAAG2Y,EAAOE,WAAW7Y,GAEnD,CA/E6B,IAA1BsL,IACA4L,EAAciB,EAAajB,EAAaE,GACxCD,EAAegB,EAAahB,EAAcC,GAEtCP,IACAK,EAAcG,EAAiBH,EAAaL,EAAiB/N,GAC7DqO,EAAeE,EAAiBF,EAAcN,EAAiB/N,KAIzC,IAA1BwC,IACA4L,EAAciB,EAAajB,EAAaE,GAEpCP,IACAK,EAAcG,EAAiBH,EAAaL,EAAiB/N,KAKjE+N,IACA/N,EAAa+N,GAgEa,IAA1BvL,IACA2L,EA1BJ,SAAoB6B,EAAaC,GAO7B,IANA,IAAI5Y,EAAS2Y,EAAY3Y,OAAS4Y,EAAa5Y,OAE3CqB,EAAS,IAAI8W,aAAanY,GAE1B6Y,EAAa,EAERC,EAAQ,EAAGA,EAAQ9Y,GACxBqB,EAAOyX,KAAWH,EAAYE,GAC9BxX,EAAOyX,KAAWF,EAAaC,GAC/BA,IAEJ,OAAOxX,CACV,CAaiB0X,CAAWhC,EAAaC,IAGZ,IAA1B7L,IACA2L,EAAcC,GAGlB,IAAIiC,EAAoBlC,EAAY9W,OAKhC4I,EAAS,IAAIqQ,YAFW,GAAyB,EAApBD,GAI7BhH,EAAO,IAAIkH,SAAStQ,GAGxB2P,EAAcvG,EAAM,EAAG,QAIvBA,EAAKmH,UAAU,EAAG,GAAyB,EAApBH,GAAuB,GAG9CT,EAAcvG,EAAM,EAAG,QAIvBuG,EAAcvG,EAAM,GAAI,QAGxBA,EAAKmH,UAAU,GAAI,IAAI,GAGvBnH,EAAKoH,UAAU,GAAI,GAAG,GAGtBpH,EAAKoH,UAAU,GAAIjO,GAAuB,GAG1C6G,EAAKmH,UAAU,GAAIxQ,GAAY,GAG/BqJ,EAAKmH,UAAU,GAAIxQ,EAAawC,EAAwB,GAAG,GAG3D6G,EAAKoH,UAAU,GAA4B,EAAxBjO,GAA2B,GAG9C6G,EAAKoH,UAAU,GAAI,IAAI,GAIvBb,EAAcvG,EAAM,GAAI,QAGxBA,EAAKmH,UAAU,GAAwB,EAApBH,GAAuB,GAM1C,IAHA,IAAIX,EAAMW,EACNF,EAAQ,GAEHjZ,EAAI,EAAGA,EAAIwY,EAAKxY,IACrBmS,EAAKqH,SAASP,EAAqB,MAAdhC,EAAYjX,IAAwB,GACzDiZ,GAAS,EAGb,GAAIjC,EACA,OAAOA,EAAG,CACNjO,OAAQA,EACRoJ,KAAMA,IAIdtM,YAAY,CACRkD,OAAQA,EACRoJ,KAAMA,GAEb,CAED,GAAIjP,EAAOuW,SACP1C,EAAkB7T,GAAQ,SAAS+D,GAC/B9C,EAAS8C,EAAK8B,OAAQ9B,EAAKkL,KAC3C,QAHQ,CAQA,IAewBzL,EACpBgT,EAMA7S,EAtBAJ,GAeoBC,EAfWqQ,EAgB/B2C,EAAYvU,EAAIC,gBAAgB,IAAIuB,KAAK,CAACD,EAAUE,WACpD,sCAAwCF,EAAUzC,KAAO,gBAC1D,CACCb,KAAM,6BAGNyD,EAAS,IAAIZ,OAAOyT,IACjBA,UAAYA,EACZ7S,GAtBPJ,EAAUO,UAAY,SAAST,GAC3BpC,EAASoC,EAAMU,KAAK8B,OAAQxC,EAAMU,KAAKkL,MAGvChN,EAAI2B,gBAAgBL,EAAUiT,WAG9BjT,EAAUkT,WACtB,EAEQlT,EAAUZ,YAAY3C,EAfrB,CAgBJ,EArQ0B,IAAvBA,EAAO4V,cACPxN,EAAwB,GAGS,IAAjCpI,EAAOoI,wBACPA,EAAwB,KAGvBA,GAAyBA,EAAwB,KAClDA,EAAwB,GAGvBpI,EAAOW,aACRC,QAAQC,IAAI,4DAA8DuH,QAOjC,IAAlCpI,EAAOkT,yBACdlT,EAAOkT,wBAAyB,GA4BpC3V,KAAKkD,OAAS,WACV,IAA8B,IAA1B4S,IACA,KAAM,0CAGVqD,IAEAC,EAAwBC,GAAW,EACnCnD,GAAY,OAEoB,IAArBzT,EAAOqI,WACdwK,GAEZ,EA+NItV,KAAK+D,KAAO,SAASL,GACjBA,EAAWA,GAAY,aAGvBwS,GAAY,EAEZG,EAAsB,CAClBD,gBAAiBA,EACjB/N,WAAYA,EACZwC,sBAAuBA,EACvB8L,0BAA2BR,EAC3BM,YAAaT,EACbU,aAAwC,IAA1B7L,EAA8B,GAAKoL,EACjD+C,SAAUvW,EAAOuW,WAClB,SAAS1Q,EAAQoJ,GAShB9O,EAAK0B,KAAO,IAAI4B,KAAK,CAACwL,GAAO,CACzB/O,KAAM,cAWVC,EAAK0F,OAAS,IAAIqQ,YAAYjH,EAAKpJ,OAAOgR,YAU1C1W,EAAK8O,KAAOA,EAEZ9O,EAAKyF,WAAa+N,GAAmB/N,EACrCzF,EAAKwF,WAAaA,EAGlBxF,EAAKlD,OAASyW,EAEdiD,GAAwB,EAEpB1V,GACAA,EAASd,EAAK0B,KAE9B,GACA,OAEqC,IAAtB/B,EAAUoG,UACjBpG,EAAUoG,QAAU,CAChBC,wBAAyB,KACzBmH,aAAc1C,OAAO0C,cAAgB1C,OAAO2C,qBAI/CzN,EAAUoG,QAAQC,yBAA+E,WAApDrG,EAAUoG,QAAQC,wBAAwBjF,QACxFpB,EAAUoG,QAAQC,wBAA0B,IAAIrG,EAAUoG,QAAQoH,cAGtE,IAAIwJ,EAAUhX,EAAUoG,QAAQC,wBAG5B4Q,EAAaD,EAAQE,wBAAwBjX,GAE7CkX,EAAoB,CAAC,EAAG,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,OAmB1DtR,OAA0C,IAAtB3F,EAAO2F,WAA6B,KAAO3F,EAAO2F,WAQ1E,IAN+C,IAA3CsR,EAAkBvJ,QAAQ/H,KACrB3F,EAAOW,aACRC,QAAQC,IAAI,oCAAsCqW,KAAKC,UAAUF,EAAmB,KAAM,QAI9FH,EAAQM,qBACR9D,EAAcwD,EAAQM,qBAAqBzR,EAAYyC,EAAuBA,OAC3E,KAAI0O,EAAQO,sBAGf,KAAM,+CAFN/D,EAAcwD,EAAQO,sBAAsB1R,EAAYyC,EAAuBA,EAGlF,CAGD2O,EAAWO,QAAQhE,GAEdtT,EAAO2F,aACRA,EAAa2N,EAAY3N,YAoB7B,IAAIC,OAA0C,IAAtB5F,EAAO4F,WAA6B5F,EAAO4F,WAAakR,EAAQlR,YAAc,OAElGA,EAAa,OAASA,EAAa,QAE9B5F,EAAOW,aACRC,QAAQC,IAAI,qDAIfb,EAAOW,aACJX,EAAO2T,iBACP/S,QAAQC,IAAI,wBAA0Bb,EAAO2T,iBAIrD,IAAIiD,GAAW,EAoDf,SAASF,IACLnD,EAAc,GACdC,EAAe,GACfE,EAAkB,EAClBiD,GAAwB,EACxBlD,GAAY,EACZmD,GAAW,EACXE,EAAU,KAEV3W,EAAKoT,YAAcA,EACnBpT,EAAKqT,aAAeA,EACpBrT,EAAKiI,sBAAwBA,EAC7BjI,EAAKwT,gBAAkBA,EACvBxT,EAAKyF,WAAaA,EAClBzF,EAAKuT,gBAAkBA,EAEvB6D,EAAwB,CACpBC,KAAM,GACNC,MAAO,GACP/D,gBAAiB,EAExB,CAED,SAAS1B,IACDsB,IACAA,EAAYoE,eAAiB,KAC7BpE,EAAYqE,aACZrE,EAAc,MAGdyD,IACAA,EAAWY,aACXZ,EAAa,MAGjBL,GACH,CAhFDnZ,KAAKqH,MAAQ,WACTgS,GAAW,CACnB,EASIrZ,KAAKsH,OAAS,WACV,IAA8B,IAA1BwO,IACA,KAAM,0CAGV,IAAKI,EAKD,OAJKzT,EAAOW,aACRC,QAAQC,IAAI,4CAEhBtD,KAAKkD,SAITmW,GAAW,CACnB,EASIrZ,KAAKmH,kBAAoB,WACrB1E,EAAOkT,wBAAyB,EAE5BO,GACAlW,KAAK+D,KAAK0Q,GAGdA,GACR,EAyCIzU,KAAKwD,KAAO,sBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,EAEI,IAAI4V,GAAwB,EAoE5BrD,EAAYoE,eAlEZ,SAAqCtZ,GACjC,IAAIwY,EAYJ,IAR8B,IAA1BvD,MACKrT,EAAOW,aACRC,QAAQC,IAAI,8BAEhByS,EAAYqE,aACZlE,GAAY,GAGXA,EAAL,CAeKkD,IACDA,GAAwB,EACpB3W,EAAO4X,uBACP5X,EAAO4X,wBAGP5X,EAAOK,cACPL,EAAOK,gBAIf,IAAImX,EAAOpZ,EAAEyZ,YAAYC,eAAe,GAGpCC,EAAS,IAAIC,aAAaR,GAG9B,GAFAjE,EAAY3T,KAAKmY,GAEa,IAA1B3P,EAA6B,CAC7B,IAAIqP,EAAQrZ,EAAEyZ,YAAYC,eAAe,GACrCG,EAAU,IAAID,aAAaP,GAC/BjE,EAAa5T,KAAKqY,EACrB,CAEDvE,GAAmB/N,EAGnBxF,EAAKuT,gBAAkBA,OAES,IAArB1T,EAAOqI,YACdkP,EAAsB7D,iBAAmB/N,EACzC4R,EAAsBC,KAAK5X,KAAKmY,GAEF,IAA1B3P,GACAmP,EAAsBE,MAAM7X,KAAKqY,GA1CxC,MALOlB,IACAA,EAAWY,aACXZ,EAAa,KAgDxB,EAKGD,EAAQoB,6BACR5E,EAAYgE,QAAQR,EAAQoB,gCAE5B5E,EAAYgE,QAAQR,EAAQqB,aAIhC5a,KAAKgW,YAAcA,EACnBhW,KAAKiW,aAAeA,EACpBjW,KAAK6K,sBAAwBA,EAC7B7K,KAAKoW,gBAAkBA,EACvBpW,KAAKqI,WAAaA,EAClBzF,EAAKuT,gBAAkBA,EAGvB,IAAI6D,EAAwB,CACxBC,KAAM,GACNC,MAAO,GACP/D,gBAAiB,GAIrB,SAASb,IACAY,GAA+C,mBAA3BzT,EAAOqS,sBAA8D,IAArBrS,EAAOqI,YAI5EkP,EAAsBC,KAAKva,QAC3B2W,EAAsB,CAClBD,gBAAiBA,EACjB/N,WAAYA,EACZwC,sBAAuBA,EACvB8L,0BAA2BqD,EAAsB7D,gBACjDM,YAAauD,EAAsBC,KACnCvD,aAAwC,IAA1B7L,EAA8B,GAAKmP,EAAsBE,QACxE,SAAS5R,EAAQoJ,GAChB,IAAIpN,EAAO,IAAI4B,KAAK,CAACwL,GAAO,CACxB/O,KAAM,cAEVF,EAAOqS,gBAAgBxQ,GAEvBT,WAAWyR,EAAQ7S,EAAOqI,UAC1C,IAEYkP,EAAwB,CACpBC,KAAM,GACNC,MAAO,GACP/D,gBAAiB,IAGrBtS,WAAWyR,EAAQ7S,EAAOqI,WAEjC,CACJ;;;;;;;;;;;;;;;;;;AA2BD,SAAS3B,EAAe0R,EAAapY,GACjC,GAA2B,oBAAhBqY,YACP,KAAM,gEAGVrY,EAASA,GAAU,IACP8I,gBACR9I,EAAO8I,cAAgB,IAI3B,IAAIwP,GAAkC,EACtC,CAAC,gBAAiB,mBAAoB,uBAAuB3W,SAAQ,SAAS4W,GACtEA,KAAQvN,SAASG,cAAc,YAC/BmN,GAAkC,EAE9C,IAEI,IAgBIE,EAAcC,EAoBdC,EApCAC,KAAe/N,OAAOgO,0BAA6BhO,OAAO6C,qBAAyB7C,OAAOiO,QAE1FC,EAAgB,GAChBC,EAAa/V,UAAU6H,UAAUmO,MAAM,4BAe3C,GAdIL,GAAaI,GAAcA,EAAW,KACtCD,EAAgB5K,SAAS6K,EAAW,GAAI,KAGxCJ,GAAaG,EAAgB,KAC7BR,GAAkC,GAGlCtY,EAAOiZ,oBACPX,GAAkC,GAKlCA,EAKA,GAJKtY,EAAOW,aACRC,QAAQC,IAAI,yEAGZuX,aAAuBc,kBACvBV,EAAeJ,MACZ,MAAIA,aAAuBe,0BAG9B,KAAM,oEAFNX,EAAeJ,EAAYvP,MAG9B,MACQ7F,UAAUC,kBACdjD,EAAOW,aACRC,QAAQmK,MAAM,kDAatBxN,KAAKkD,OAAS,WAGV,GAFAiY,GAAc,EAEVJ,IAAoCtY,EAAOiZ,kBAAmB,CAE9D,IAAIG,EACA,kBAAmBZ,EACnBY,EAAoBZ,EAAapN,cAAc,IACxC,qBAAsBoN,EAC7BY,EAAoBZ,EAAanN,iBAAiB,IAC3C,wBAAyBmN,IAChCY,EAAoBZ,EAAaa,oBAAoB,KAGzD,IACI,IAAIC,EAAW,IAAI5Q,EACnB4Q,EAAS3Q,SAAS5B,EAAUqS,EAAmB,SAAS,IACxDA,EAAoBE,CACpC,CAAc,MAAOlb,GAAK,CAEd,IAAKgb,EACD,KAAM,wCAKVX,EAAsB,IAAI3R,EAAoBsS,EAAmB,CAC7DnS,SAAUjH,EAAOiH,UAAY,gBAEbxG,QAChC,MACY8Y,EAAOC,OAAS,GAChBhN,GAAW,IAAIG,MAAOC,UACtB6M,IAGAzZ,EAAOK,cACPL,EAAOK,cAEnB,EAEI9C,KAAKmc,cAAgB,SAASzY,GAC1B,GAA2C,WAAvCmX,EAAYuB,SAAS7L,cAAzB,CAKA,IAAI8L,EAAeL,EAAOC,OAAOvc,OACjCsc,EAAOC,OAAO7X,SAAQ,SAASkY,EAAOC,GAClC,IAAIC,EAAkBH,EAAeE,EAChC9Z,EAAOW,aACRC,QAAQC,IAAIkZ,EAAkB,IAAMH,EAAe,qBAGnD5Z,EAAOga,oBACPha,EAAOga,mBAAmBD,EAAiBH,GAG/C,IAAIK,EAAOJ,EAAMnU,MAAMgG,UAAU,aAAc,GAC/C6N,EAAOC,OAAOM,GAAKpU,MAAQuU,CACvC,IAEaja,EAAOW,aACRC,QAAQC,IAAI,mBAGhBI,GArBC,MAFGA,GAwBZ,EAYI1D,KAAK+D,KAAO,SAASL,GACjByX,GAAc,EAEd,IAAIhO,EAAOnN,KAEP+a,GAAmCG,EACnCA,EAAoBnX,KAAKL,GAI7B1D,KAAKmc,eAAc,WASfH,EAAOW,SAAQ,SAASrY,GACf7B,EAAOW,aACRC,QAAQC,IAAI,uBAGhB6J,EAAK7I,KAAOA,EAER6I,EAAK7I,KAAKF,UACV+I,EAAK7I,KAAO,IAAI4B,KAAK,GAAI,CACrBvD,KAAM,gBAIVe,GACAA,EAASyJ,EAAK7I,MAGlB0X,EAAOC,OAAS,EAChC,GACA,GACA,EAEI,IAAIW,GAAoB,EAoDxB,SAASnI,IACLuH,EAAOC,OAAS,GAChBd,GAAc,EACdyB,GAAoB,CACvB,CAwBD,SAASV,IACL,GAAIU,EAEA,OADA3N,GAAW,IAAIG,MAAOC,UACfxL,WAAWqY,EAAiB,KAGvC,GAA2C,WAAvCrB,EAAYuB,SAAS7L,cAA4B,CACjD,IAAIrI,GAAW,IAAIkH,MAAOC,UAAYJ,EAYtC,OAVAA,GAAW,IAAIG,MAAOC,UAEtB2M,EAAOC,OAAO5Z,KAAK,CACf8F,OA1BJ0U,EAAYpP,SAASG,cAAc,UACnC2L,EAAUsD,EAAU7O,WAAW,MAGnC6O,EAAUlO,MAAQkM,EAAYlM,MAC9BkO,EAAUjO,OAASiM,EAAYjM,OAG/B2K,EAAQrL,UAAU2M,EAAa,EAAG,GAG3BgC,GAgBC3U,SAAUA,SAGViT,GACAtX,WAAWqY,EAAiBzZ,EAAO8I,eAG1C,CApCL,IAEQsR,EACAtD,EAmCJuB,YAAYD,EAAa,CACrBiC,eAA8C,IAA5Bra,EAAOsa,kBAAoCta,EAAOsa,iBACpEC,WAAY,SAAS1R,GACjB,IAAIpD,GAAW,IAAIkH,MAAOC,UAAYJ,EACtC,IAAK/G,EACD,OAAOrE,WAAWqY,EAAiBzZ,EAAO8I,eAI9C0D,GAAW,IAAIG,MAAOC,UAEtB2M,EAAOC,OAAO5Z,KAAK,CACf8F,MAAOmD,EAAO6C,UAAU,aAAc,GACtCjG,SAAUA,IAGViT,GACAtX,WAAWqY,EAAiBzZ,EAAO8I,cAE1C,GAER,CAlHDvL,KAAKqH,MAAQ,WACTuV,GAAoB,EAEhB1B,aAA+B3R,GAC/B2R,EAAoB7T,OAGhC,EASIrH,KAAKsH,OAAS,WACVsV,GAAoB,EAEhB1B,aAA+B3R,EAC/B2R,EAAoB5T,SAInB6T,GACDnb,KAAKkD,QAEjB,EASIlD,KAAKmH,kBAAoB,WACjBgU,GACAnb,KAAK+D,KAAK0Q,GAEdA,GACR,EASIzU,KAAKwD,KAAO,iBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,EA+DI,IAAIyL,GAAW,IAAIG,MAAOC,UAEtB2M,EAAS,IAAIiB,EAAOC,MAAM,IACjC;;;;;;;;;;;;;;;;;;AA2BD,SAAShU,EAAe1G,EAAaC,GAuFjC,SAAS0a,EAAW5R,GAChBA,OAAyC,IAAlBA,EAAgCA,EAAgB,GAEvE,IAAIrD,GAAW,IAAIkH,MAAOC,UAAYJ,EACtC,OAAK/G,EAID0U,GACA3N,GAAW,IAAIG,MAAOC,UACfxL,WAAWsZ,EAAY,OAIlClO,GAAW,IAAIG,MAAOC,UAElBpG,EAAMmU,QAGNnU,EAAMgF,OAGVsL,EAAQrL,UAAUjF,EAAO,EAAG,EAAGqC,EAAOqD,MAAOrD,EAAOsD,QACpDoN,EAAOC,OAAO5Z,KAAK,CACf6F,SAAUA,EACVC,MAAOmD,EAAO6C,UAAU,qBAGvBkP,GACDxZ,WAAWsZ,EAAY5R,EAAeA,KAxB/B1H,WAAWsZ,EAAY5R,EAAeA,EA0BpD,CA8BD,SAAS+R,EAAgBC,EAASC,EAAgBC,EAAeC,EAAiBha,GAC9E,IAAIia,EAAclQ,SAASG,cAAc,UACzC+P,EAAYhP,MAAQrD,EAAOqD,MAC3BgP,EAAY/O,OAAStD,EAAOsD,OAC5B,IAhCegP,EACXre,EACAG,EA8BAme,EAAYF,EAAY3P,WAAW,MACnC8P,EAAe,GAGfC,EACiBR,EAAQ7d,OACzBse,EACG,EADHA,EAEG,EAFHA,EAGG,EAEHC,EAAqB1O,KAAK2O,KAC1B3O,KAAKsB,IAAI,IAAK,GACdtB,KAAKsB,IAAI,IAAK,GACdtB,KAAKsB,IAAI,IAAK,IAIdsN,GAAiB,EAjDjB5e,GAAK,EACLG,GAFWke,EAoDL,CACNle,OAAQqe,EACRK,eAAgB,SAASC,EAAMjd,GAC3B,IAAIkd,EAAeC,EAAaC,EAE5BC,EAAc,YACTN,GAAkBK,EAAcF,GATwD,EASvCE,IAK9CL,GAAiB,EAErBL,EAAazb,KAAKkb,EAAQnc,KAE9Bid,GACpB,EAEgB,GAAKF,EA6BDM,QA7BiB,CACjB,IAAItW,EAAQ,IAAIuW,MAChBvW,EAAMtC,OAAS,WACXgY,EAAU3P,UAAU/F,EAAO,EAAG,EAAGmD,EAAOqD,MAAOrD,EAAOsD,QACtD,IAAI+P,EAAYd,EAAUe,aAAa,EAAG,EAAGtT,EAAOqD,MAAOrD,EAAOsD,QAClE0P,EAAgB,EAChBC,EAAcI,EAAUnY,KAAK9G,OAC7B8e,EAAcG,EAAUnY,KAAK9G,OAAS,EAEtC,IAAK,IAAImf,EAAM,EAAGA,EAAMN,EAAaM,GAAO,EAAG,CAC3C,IAAIC,EAAe,CACfC,EAAGJ,EAAUnY,KAAKqY,GAClBvd,EAAGqd,EAAUnY,KAAKqY,EAAM,GACxBG,EAAGL,EAAUnY,KAAKqY,EAAM,IAENtP,KAAK2O,KACvB3O,KAAKsB,IAAIiO,EAAaC,EAAIf,EAAe,GACzCzO,KAAKsB,IAAIiO,EAAaxd,EAAI0c,EAAe,GACzCzO,KAAKsB,IAAIiO,EAAaE,EAAIhB,EAAe,KAxC8B,EA2CpDC,GACnBK,GAEP,CACDG,GACxB,EACoBtW,EAAM8W,IAAM1B,EAAQnc,GAAG+G,KAC3C,CAGa,EACDzE,SAAU,YACNoa,EAAeA,EAAaoB,OAAO3B,EAAQhK,MAAMwK,KAEhCre,QAAU,GAGvBoe,EAAazb,KAAKkb,EAAQA,EAAQ7d,OAAS,IAE/CgE,EAASoa,EACZ,IA7GUpe,OAEf,SAAU2e,MACN9e,IACUG,EAMVmE,YAAW,WACP+Z,EAAEQ,eAAeC,EAAM9e,EAC1B,GAAE,GAPCqe,EAAEla,UAQT,CAXD,EA6GH,EAvODjB,EAASA,GAAU,IAEP8I,gBACR9I,EAAO8I,cAAgB,IAGtB9I,EAAOW,aACRC,QAAQC,IAAI,yBAA0Bb,EAAO8I,eAUjDvL,KAAKkD,OAAS,WACLT,EAAOkM,QACRlM,EAAOkM,MAAQ,KAGdlM,EAAOmM,SACRnM,EAAOmM,OAAS,KAGfnM,EAAOwG,QACRxG,EAAOwG,MAAQ,CACX0F,MAAOlM,EAAOkM,MACdC,OAAQnM,EAAOmM,SAIlBnM,EAAO6I,SACR7I,EAAO6I,OAAS,CACZqD,MAAOlM,EAAOkM,MACdC,OAAQnM,EAAOmM,SAIvBtD,EAAOqD,MAAQlM,EAAO6I,OAAOqD,OAAS,IACtCrD,EAAOsD,OAASnM,EAAO6I,OAAOsD,QAAU,IAExC2K,EAAUjO,EAAO0C,WAAW,MAGxBvL,EAAOwG,OAASxG,EAAOwG,iBAAiBoF,kBACxCpF,EAAQxG,EAAOwG,MAAMkW,YAEjB1c,EAAOK,cACPL,EAAOK,iBAGXmG,EAAQwE,SAASG,cAAc,SAE/BuE,EAAa3P,EAAayG,GAE1BA,EAAMmW,iBAAmB,WACjB3c,EAAOK,cACPL,EAAOK,cAE3B,EAEYmG,EAAM0F,MAAQlM,EAAOwG,MAAM0F,MAC3B1F,EAAM2F,OAASnM,EAAOwG,MAAM2F,QAGhC3F,EAAMoW,OAAQ,EACdpW,EAAMgF,OAENgB,GAAW,IAAIG,MAAOC,UACtB2M,EAAS,IAAIiB,EAAOC,MAEfza,EAAOW,cACRC,QAAQC,IAAI,qBAAsBgI,EAAOqD,MAAO,IAAKrD,EAAOsD,QAC5DvL,QAAQC,IAAI,qBAAsB2F,EAAM0F,OAASrD,EAAOqD,MAAO,IAAK1F,EAAM2F,QAAUtD,EAAOsD,SAG/FuO,EAAW1a,EAAO8I,cAC1B,EA0JI,IAAI8R,GAAgB,EAYpBrd,KAAK+D,KAAO,SAASL,GACjBA,EAAWA,GAAY,aAEvB2Z,GAAgB,EAEhB,IAAIiC,EAAQtf,KAEZ6D,YAAW,WAIPyZ,EAAgBtB,EAAOC,OAAQ,EAAI,EAAM,GAAM,SAASA,GACpDD,EAAOC,OAASA,EAGZxZ,EAAOwF,eAAiBxF,EAAOwF,cAAcvI,SAC7Csc,EAAOC,OAASxZ,EAAOwF,cAAciX,OAAOlD,EAAOC,SAWvDD,EAAOW,SAAQ,SAASrY,GACpBgb,EAAMhb,KAAOA,EAETgb,EAAMhb,KAAKF,UACXkb,EAAMhb,KAAO,IAAI4B,KAAK,GAAI,CACtBvD,KAAM,gBAIVe,GACAA,EAAS4b,EAAMhb,KAEvC,GACA,GACS,GAAE,GACX,EAEI,IAAIsY,GAAoB,EA0CxB,SAASnI,IACLuH,EAAOC,OAAS,GAChBoB,GAAgB,EAChBT,GAAoB,CACvB,CArCD5c,KAAKqH,MAAQ,WACTuV,GAAoB,CAC5B,EASI5c,KAAKsH,OAAS,WACVsV,GAAoB,EAEhBS,GACArd,KAAKkD,QAEjB,EASIlD,KAAKmH,kBAAoB,WAChBkW,GACDrd,KAAK+D,KAAK0Q,GAEdA,GACR,EASIzU,KAAKwD,KAAO,iBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,EAEI,IAGIyF,EACAgG,EACA+M,EALA1Q,EAASmC,SAASG,cAAc,UAChC2L,EAAUjO,EAAO0C,WAAW,KAKnC,MAt7D2B,IAAjB+B,EACPpH,EAAQoH,aAAeA,EACc,oBAAvBC,qBACdrH,EAAQoH,aAAeC,yBAGF,IAAdzN,IACPA,EAAUoG,QAAUA,QAshBC,IAAdpG,IACPA,EAAUgH,oBAAsBA,QA8sBX,IAAdhH,IACPA,EAAU+G,oBAAsBA,QAiVX,IAAd/G,IACPA,EAAU4G,eAAiBA,QAyXN,IAAd5G,IACPA,EAAU2G,eAAiBA;;;;;;;;;;;;;;AAyB/B,IAAI+T,EAAS,WAGT,SAASsC,EAAYrX,GACjBlI,KAAKic,OAAS,GACdjc,KAAKkI,SAAWA,GAAY,EAC5BlI,KAAK8L,QAAU,EAClB,CA0CD,SAAS0T,EAAkBvD,GAkHvB,SAASwD,EAAeC,EAAiBC,EAAgBC,GACrD,MAAO,CAAC,CACJpZ,KAAQkZ,EACRjQ,GAAM,MACPyP,OAAOU,EAAcC,KAAI,SAASnD,GACjC,IAAIoD,EA6GZ,SAAyBtZ,GACrB,IAAIuZ,EAAQ,EAkBZ,GAfIA,GAAS,IAeTvZ,EAAKwZ,SAAW,IAChB,KAAM,kCAOV,MAJU,CAAiB,IAAhBxZ,EAAKwZ,SAAiBxZ,EAAKyZ,UAAY,EAAmB,IAAhBzZ,EAAKyZ,SAAiBF,GAAOF,KAAI,SAAShf,GAC3F,OAAOqf,OAAOC,aAAatf,EAC9B,IAAEuf,KAAK,IAAM5Z,EAAK8V,KAGtB,CAzImB+D,CAAgB,CACxBC,YAAa,EACbhE,MAAOI,EAAKlW,KAAK+M,MAAM,GACvBgN,UAAW,EACXC,SAAU,EACVC,OAAQ,EACRT,SAAU,EACVC,SAAU1Q,KAAK4B,MAAMwO,KAGzB,OADAA,GAAkBjD,EAAKxU,SAChB,CACH1B,KAAMsZ,EACNrQ,GAAI,IAEX,IACJ,CA0BD,SAASiR,EAAYC,GAEjB,IADA,IAAIC,EAAQ,GACLD,EAAM,GACTC,EAAMve,KAAW,IAANse,GACXA,IAAa,EAEjB,OAAO,IAAIE,WAAWD,EAAME,UAC/B,CAQD,SAASC,EAAaC,GAClB,IAAIxa,EAAO,GAEXwa,GADWA,EAAKthB,OAAS,EAAK,IAAK0K,MAAM,EAAS4W,EAAKthB,OAAS,GAAK0gB,KAAK,KAAO,IACpEY,EACb,IAAK,IAAIzhB,EAAI,EAAGA,EAAIyhB,EAAKthB,OAAQH,GAAK,EAClCiH,EAAKnE,KAAKsO,SAASqQ,EAAKC,OAAO1hB,EAAG,GAAI,IAE1C,OAAO,IAAIshB,WAAWra,EACzB,CAED,SAAS0a,EAAaC,GAElB,IADA,IAAIC,EAAO,GACF7hB,EAAI,EAAGA,EAAI4hB,EAAKzhB,OAAQH,IAAK,CAClC,IAAIiH,EAAO2a,EAAK5hB,GAAGiH,KAEC,iBAATA,IACPA,EAAO0a,EAAa1a,IAGJ,iBAATA,IACPA,EAAOua,EAAava,EAAKL,SAAS,KAGlB,iBAATK,IACPA,EA7BD,IAAIqa,WA6BgBra,EA7BDmD,MAAM,IAAIkW,KAAI,SAAShf,GAC7C,OAAOA,EAAEuX,WAAW,EACvB,MA8BG,IAAIiJ,EAAM7a,EAAKhC,MAAQgC,EAAK8S,YAAc9S,EAAK9G,OAC3C4hB,EAAS/R,KAAKgI,KAAKhI,KAAKgI,KAAKhI,KAAKjM,IAAI+d,GAAO9R,KAAKjM,IAAI,IAAM,GAC5Die,EAAeF,EAAIlb,SAAS,GAC5Bqb,EAAS,IAAKpX,MAAgB,EAATkX,EAAa,EAAI,EAAKC,EAAa7hB,QAAS0gB,KAAK,KAAOmB,EAC7E/c,EAAO,IAAK4F,MAAMkX,GAASlB,KAAK,KAAO,IAAMoB,EAEjDJ,EAAK/e,KAAKqe,EAAYS,EAAK5hB,GAAGkQ,KAC9B2R,EAAK/e,KAAK0e,EAAavc,IACvB4c,EAAK/e,KAAKmE,EACb,CAED,OAAO,IAAIN,KAAKkb,EAAM,CAClBze,KAAM,cAEb,CAiED,SAAS8e,EAAavJ,EAAQJ,GAC1B,OAAOnH,SAASuH,EAAO+I,OAAOnJ,EAAS,EAAG,GAAGnO,MAAM,IAAIkW,KAAI,SAAStgB,GAChE,IAAImiB,EAAWniB,EAAE6Y,WAAW,GAAGjS,SAAS,GACxC,OAAO,IAAKiE,MAAM,EAAIsX,EAAShiB,OAAS,GAAI0gB,KAAK,KAAOsB,CAC3D,IAAEtB,KAAK,IAAK,EAChB,CAED,SAASuB,EAAUzJ,GAIf,IAHA,IAAIJ,EAAS,EACT8J,EAAS,CAAA,EAEN9J,EAASI,EAAOxY,QAAQ,CAC3B,IAAI+P,EAAKyI,EAAO+I,OAAOnJ,EAAQ,GAC3BuJ,EAAMI,EAAavJ,EAAQJ,GAC3BtR,EAAO0R,EAAO+I,OAAOnJ,EAAS,EAAI,EAAGuJ,GACzCvJ,GAAU,EAAQuJ,EAClBO,EAAOnS,GAAMmS,EAAOnS,IAAO,GAEhB,SAAPA,GAAwB,SAAPA,EACjBmS,EAAOnS,GAAIpN,KAAKsf,EAAUnb,IAE1Bob,EAAOnS,GAAIpN,KAAKmE,EAEvB,CACD,OAAOob,CACV,CASD,IAAIC,EAAO,IA1TX,SAAqB5F,GACjB,IAAI6F,EAwIR,SAAqB7F,GACjB,IAAKA,EAAO,GAIR,YAHA7W,YAAY,CACRoI,MAAO,qFASf,IAJA,IAAImB,EAAQsN,EAAO,GAAGtN,MAClBC,EAASqN,EAAO,GAAGrN,OACnB1G,EAAW+T,EAAO,GAAG/T,SAEhB3I,EAAI,EAAGA,EAAI0c,EAAOvc,OAAQH,IAC/B2I,GAAY+T,EAAO1c,GAAG2I,SAE1B,MAAO,CACHA,SAAUA,EACVyG,MAAOA,EACPC,OAAQA,EAEf,CA5JcmT,CAAY9F,GACvB,IAAK6F,EACD,MAAO,GAwFX,IArFA,IA6SoBnB,EA3ShBjO,EAAO,CAAC,CACRjD,GAAM,UACNjJ,KAAQ,CAAC,CACLA,KAAQ,EACRiJ,GAAM,OACP,CACCjJ,KAAQ,EACRiJ,GAAM,OACP,CACCjJ,KAAQ,EACRiJ,GAAM,OACP,CACCjJ,KAAQ,EACRiJ,GAAM,OACP,CACCjJ,KAAQ,OACRiJ,GAAM,OACP,CACCjJ,KAAQ,EACRiJ,GAAM,OACP,CACCjJ,KAAQ,EACRiJ,GAAM,SAEX,CACCA,GAAM,UACNjJ,KAAQ,CAAC,CACLiJ,GAAM,UACNjJ,KAAQ,CAAC,CACLA,KAAQ,IACRiJ,GAAM,SACP,CACCjJ,KAAQ,SACRiJ,GAAM,OACP,CACCjJ,KAAQ,SACRiJ,GAAM,OACP,CACCjJ,MAqQQma,EArQemB,EAAK5Z,SAsQjC,GAAGqL,MAAMzT,KACZ,IAAI+gB,WAAW,IAAKhJ,aAAa,CAAC8I,IAAOrY,QAAS,GAAGuX,KAAI,SAAShf,GAClE,OAAOqf,OAAOC,aAAatf,EAC9B,IAAEigB,UAAUV,KAAK,KAxQN3Q,GAAM,SAEX,CACCA,GAAM,UACNjJ,KAAQ,CAAC,CACLiJ,GAAM,IACNjJ,KAAQ,CAAC,CACLA,KAAQ,EACRiJ,GAAM,KACP,CACCjJ,KAAQ,EACRiJ,GAAM,OACP,CACCjJ,KAAQ,EACRiJ,GAAM,KACP,CACCjJ,KAAQ,MACRiJ,GAAM,SACP,CACCjJ,KAAQ,QACRiJ,GAAM,KACP,CACCjJ,KAAQ,MACRiJ,GAAM,SACP,CACCjJ,KAAQ,EACRiJ,GAAM,KACP,CACCA,GAAM,IACNjJ,KAAQ,CAAC,CACLA,KAAQsb,EAAKnT,MACbc,GAAM,KACP,CACCjJ,KAAQsb,EAAKlT,OACba,GAAM,cAQtBuS,EAAc,EACdtC,EAAkB,EACfsC,EAAc/F,EAAOvc,QAAQ,CAEhC,IAAIkgB,EAAgB,GAChBqC,EAAkB,EACtB,GACIrC,EAAcvd,KAAK4Z,EAAO+F,IAC1BC,GAAmBhG,EAAO+F,GAAa9Z,SACvC8Z,UACKA,EAAc/F,EAAOvc,QAAUuiB,EA7FnB,KA+FrB,IACIC,EAAU,CACVzS,GAAM,UACNjJ,KAAQiZ,EAAeC,EAHN,EAGuCE,IAE5DlN,EAAK,GAAGlM,KAAKnE,KAAK6f,GAClBxC,GAAmBuC,CACtB,CAED,OAAOf,EAAaxO,EACvB,CA2MU,CAAgBuJ,EAAO4D,KAAI,SAASvD,GAC3C,IAAII,EA1DR,SAAmByF,GAIf,IAHA,IAAIC,EAAMD,EAAKE,KAAK,GAAGC,KAAK,GAExBC,EAAaH,EAAIjS,QAAQ,OACpB5Q,EAAI,EAAGijB,EAAI,GAAIjjB,EAAI,EAAGA,IAC3BijB,EAAEjjB,GAAK6iB,EAAIhK,WAAWmK,EAAa,EAAIhjB,GAU3C,MAAO,CACHoP,MAJU,OADP6T,EAAE,IAAM,EAAKA,EAAE,IAMlB5T,OAHW,OADR4T,EAAE,IAAM,EAAKA,EAAE,IAKlBhc,KAAM4b,EACND,KAAMA,EAEb,CAqCcM,CAAUd,EAAUe,KAAKpG,EAAMnU,MAAMoL,MAAM,OAEtD,OADAmJ,EAAKxU,SAAWoU,EAAMpU,SACfwU,CACV,KAEDtX,YAAYyc,EACf,CA2BD,OA3XAtC,EAAY3f,UAAU+iB,IAAM,SAASrG,EAAOpU,GASxC,GARI,WAAYoU,IACZA,EAAQA,EAAMhR,QAGd,cAAegR,IACfA,EAAQA,EAAMnO,UAAU,aAAcnO,KAAK8L,WAG1C,8BAAgC0E,KAAK8L,GACtC,KAAM,kFAEVtc,KAAKic,OAAO5Z,KAAK,CACb8F,MAAOmU,EACPpU,SAAUA,GAAYlI,KAAKkI,UAEvC,EA6VIqX,EAAY3f,UAAU+c,QAAU,SAASjZ,GACrC,IA5VwBuC,EACpB3B,EAMA8B,EAqVAJ,GA5VoBC,EA4VWuZ,EA3V/Blb,EAAOI,EAAIC,gBAAgB,IAAIuB,KAAK,CAACD,EAAUE,WAC/C,qCAAuCF,EAAUzC,KAAO,gBACzD,CACCb,KAAM,4BAGNyD,EAAS,IAAIZ,OAAOlB,GACxBI,EAAI2B,gBAAgB/B,GACb8B,GAqVPJ,EAAUO,UAAY,SAAST,GACvBA,EAAMU,KAAKgH,MACXnK,QAAQmK,MAAM1H,EAAMU,KAAKgH,OAG7B9J,EAASoC,EAAMU,KAC3B,EAEQR,EAAUZ,YAAYpF,KAAKic,OACnC,EAEW,CAUHiB,MAAOqC,EAEd,CA1ZY,QA4ZY,IAAdhd,IACPA,EAAU0a,OAASA;;;;;;;;;;;;;;;;;;;;;;;;;IAiCvB,IAAIjY,EAAc,CASd4d,KAAM,WACF,IAAIhgB,EAAO5C,KAEX,GAAyB,oBAAd6iB,gBAAuD,IAAnBA,UAAUC,KAAzD,CAKA,IAEIC,EADAC,EAAShjB,KAAKgjB,QAAU1U,SAASE,KAAK7B,QAAQ,qBAAsB,IAEpEsW,EAAUJ,UAAUC,KAAKE,EAHb,GAqChBC,EAAQ5N,QAAUzS,EAAKsgB,QAEvBD,EAAQE,UAAY,aAChBJ,EAAKE,EAAQliB,QACVsU,QAAUzS,EAAKsgB,QAEdH,EAAGK,YA3CK,IA4CJL,EAAG7b,QACc6b,EAAGK,WA7ChB,GA8COD,UAAY,WACnBE,EAAkBN,GAClBO,GACxB,EAEoBA,IAGJA,GAEhB,EACQL,EAAQM,gBAAkB,SAASzd,GAC/Bud,EAAkBvd,EAAMC,OAAOhF,OAC3C,CA7DS,MAFGsC,QAAQmK,MAAM,oDASlB,SAAS6V,EAAkBG,GACvBA,EAASH,kBAAkBzgB,EAAK6gB,cACnC,CAED,SAASH,IACL,IAAII,EAAcX,EAAGW,YAAY,CAAC9gB,EAAK6gB,eAAgB,aAcvD,SAASE,EAAaC,GAClBF,EAAYG,YAAYjhB,EAAK6gB,eAAeK,IAAIF,GAAaT,UAAY,SAASrd,GAC1ElD,EAAKc,UACLd,EAAKc,SAASoC,EAAMC,OAAOhF,OAAQ6iB,EAE3D,CACa,CAlBGhhB,EAAKqK,WACLyW,EAAYG,YAAYjhB,EAAK6gB,eAAeM,IAAInhB,EAAKqK,UAAW,aAGhErK,EAAKsK,SACLwW,EAAYG,YAAYjhB,EAAK6gB,eAAeM,IAAInhB,EAAKsK,QAAS,WAG9DtK,EAAKoK,WACL0W,EAAYG,YAAYjhB,EAAK6gB,eAAeM,IAAInhB,EAAKoK,UAAW,aAWpE2W,EAAa,aACbA,EAAa,aACbA,EAAa,UAChB,CAyBJ,EAaDlX,MAAO,SAAS/I,GAIZ,OAHA1D,KAAK0D,SAAWA,EAChB1D,KAAK4iB,OAEE5iB,IACV,EAaDiF,MAAO,SAASxC,GAOZ,OANAzC,KAAKgN,UAAYvK,EAAOuK,UACxBhN,KAAKiN,UAAYxK,EAAOwK,UACxBjN,KAAKkN,QAAUzK,EAAOyK,QAEtBlN,KAAK4iB,OAEE5iB,IACV,EAWDkjB,QAAS,SAAS1V,GACdnK,QAAQmK,MAAMmM,KAAKC,UAAUpM,EAAO,KAAM,MAC7C,EASDiW,cAAe,YACfT,OAAQ;;;;;;;;;;;;;;;;;AA2BZ,SAAS3Z,EAAY7G,EAAaC,GAC9B,GAA0B,oBAAfuhB,WAA4B,CACnC,IAAIC,EAASxW,SAASG,cAAc,UACpCqW,EAAOhF,IAAM,qDACZxR,SAAStM,MAAQsM,SAASC,iBAAiBC,YAAYsW,EAC3D,CAEDxhB,EAASA,GAAU,GAEnB,IAAIyhB,EAAe1hB,aAAuBoZ,0BAA4BpZ,aAAuBmZ,kBAS7F3b,KAAKkD,OAAS,WACgB,oBAAf8gB,YAKNG,GAKAD,IACIzhB,EAAOkM,QACRlM,EAAOkM,MAAQ1F,EAAMmb,aAAe,KAGnC3hB,EAAOmM,SACRnM,EAAOmM,OAAS3F,EAAMob,cAAgB,KAGrC5hB,EAAOwG,QACRxG,EAAOwG,MAAQ,CACX0F,MAAOlM,EAAOkM,MACdC,OAAQnM,EAAOmM,SAIlBnM,EAAO6I,SACR7I,EAAO6I,OAAS,CACZqD,MAAOlM,EAAOkM,MACdC,OAAQnM,EAAOmM,SAIvBtD,EAAOqD,MAAQlM,EAAO6I,OAAOqD,OAAS,IACtCrD,EAAOsD,OAASnM,EAAO6I,OAAOsD,QAAU,IAExC3F,EAAM0F,MAAQlM,EAAOwG,MAAM0F,OAAS,IACpC1F,EAAM2F,OAASnM,EAAOwG,MAAM2F,QAAU,MAI1C0V,EAAa,IAAIN,YAKNO,UAAU,GAMrBD,EAAWE,SAAS/hB,EAAOiJ,WAAa,KASxC4Y,EAAWG,WAAWhiB,EAAOqJ,SAAW,IAIxCwY,EAAW7O,QAEiC,mBAAjChT,EAAOiiB,uBACdjiB,EAAOiiB,wBA6CXC,EAAqB9V,GAxCrB,SAAS+V,EAAeC,GACpB,IAAiC,IAA7BjiB,EAAKkiB,oBAAT,CAIA,GAAIlI,EACA,OAAO/Y,YAAW,WACd+gB,EAAeC,EAClB,GAAE,KAGPF,EAAqB9V,EAAsB+V,QAEdG,WAAlBC,IACPA,EAAgBH,GAIhBA,EAAOG,EAAgB,MAItBd,GAAgBjb,EAAMmU,QAGvBnU,EAAMgF,OAGLiW,GACD3K,EAAQrL,UAAUjF,EAAO,EAAG,EAAGqC,EAAOqD,MAAOrD,EAAOsD,QAGpDnM,EAAOwiB,cACPxiB,EAAOwiB,aAAa3Z,EAAO6C,UAAU,cAGzCmW,EAAWY,SAAS3L,GACpByL,EAAgBH,EAlCf,CAmCJ,IAIGpiB,EAAOK,cACPL,EAAOK,gBAnHPe,WAAWjB,EAAKM,OAAQ,IAqHpC,EAYIlD,KAAK+D,KAAO,SAASL,GACjBA,EAAWA,GAAY,aAEnBihB,GACAjV,EAAqBiV,GAazB3kB,KAAKsE,KAAO,IAAI4B,KAAK,CAAC,IAAI2a,WAAWyD,EAAWtS,SAASmT,MAAO,CAC5DxiB,KAAM,cAGVe,EAAS1D,KAAKsE,MAGdggB,EAAWtS,SAASmT,IAAM,EAClC,EAEI,IAAIvI,GAAoB,EASxB5c,KAAKqH,MAAQ,WACTuV,GAAoB,CAC5B,EASI5c,KAAKsH,OAAS,WACVsV,GAAoB,CAC5B,EASI5c,KAAKmH,kBAAoB,WACrBvE,EAAKkiB,qBAAsB,EAKvBR,IACAA,EAAWtS,SAASmT,IAAM,GAJtC,EASInlB,KAAKwD,KAAO,cACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,EAEI,IAAI8H,EAASmC,SAASG,cAAc,UAChC2L,EAAUjO,EAAO0C,WAAW,MAE5BkW,IACI1hB,aAAuBoZ,yBAEvBtQ,GADAiO,EAAU/W,GACO8I,OACV9I,aAAuBmZ,oBAC9BpC,EAAU/W,EAAYwL,WAAW,MACjC1C,EAAS9I,IAIjB,IAAI2hB,GAAmB,EAEvB,IAAKD,EAAc,CACf,IAAIjb,EAAQwE,SAASG,cAAc,SACnC3E,EAAMoW,OAAQ,EACdpW,EAAMmc,UAAW,EACjBnc,EAAMoc,aAAc,EAEpBlB,GAAmB,EACnBlb,EAAMmW,iBAAmB,WACrB+E,GAAmB,CAC/B,EAEQhS,EAAa3P,EAAayG,GAE1BA,EAAMgF,MACT,CAED,IACwB+W,EAEpBV,EAHAK,EAAqB,KAKrB/hB,EAAO5C,IACd,CAkBD,SAASslB,EAAkBC,EAAqBC,IAI5C,SAAUrY,QACmB,IAAd5K,GAIN4K,GAIiB,oBAAXE,aAIW,IAAXD,IAIXA,EAAO3H,UAAY,CACf6H,UApBmB,sFAqBnBC,aAAc,WAAa,GAG1BH,EAAO/J,UACR+J,EAAO/J,QAAU,SAGa,IAAvB+J,EAAO/J,QAAQC,UAAuD,IAAzB8J,EAAO/J,QAAQmK,QACnEJ,EAAO/J,QAAQmK,MAAQJ,EAAO/J,QAAQC,IAAM8J,EAAO/J,QAAQC,KAAO,WAC9DD,QAAQC,IAAI7D,UAC5B,GAGgC,oBAAbgO,WAEPN,EAAKM,SAAW,CACZC,gBAAiB,CACbC,YAAa,WACT,MAAO,EACV,IAITF,SAASG,cAAgBH,SAASI,cAAgBJ,SAASK,iBAAmB,WAC1E,IAAIC,EAAM,CACNC,WAAY,WACR,OAAOD,CACV,EACDE,KAAM,WAAa,EACnB5G,MAAO,WAAa,EACpB6G,UAAW,WAAa,EACxBC,UAAW,WACP,MAAO,EACV,EACDC,MAAO,CAAE,GAEb,OAAOL,CACvB,EAEYZ,EAAKkB,iBAAmB,cAGJ,oBAAbC,WAEPnB,EAAKmB,SAAW,CACZC,SAAU,QACVC,KAAM,GACNC,KAAM,KAIQ,oBAAXC,SAEPvB,EAAKuB,OAAS,CACVC,MAAO,EACPC,OAAQ,SAIG,IAARlK,IAEPyI,EAAKzI,IAAM,CACPC,gBAAiB,WACb,MAAO,EACV,EACD0B,gBAAiB,WACb,MAAO,EACV,IAKT8G,EAAKE,OAASD,EACjB,CA5FD,MA4FqB,IAAXA,EAAyBA,EAAS,MAI5CoY,EAAeA,GAAgB,sBAE/B,IAAIC,EAAS,GACTC,GAAsB,EAEtBpa,EAASmC,SAASG,cAAc,UAChC2L,EAAUjO,EAAO0C,WAAW,MAChC1C,EAAO8C,MAAMuX,QAAU,EACvBra,EAAO8C,MAAMwX,SAAW,WACxBta,EAAO8C,MAAMyX,QAAU,EACvBva,EAAO8C,MAAM0X,IAAM,UACnBxa,EAAO8C,MAAM6L,KAAO,UACpB3O,EAAOya,UAAYP,GAClB/X,SAAStM,MAAQsM,SAASC,iBAAiBC,YAAYrC,GAExDtL,KAAKoD,aAAc,EACnBpD,KAAKuL,cAAgB,GAErBvL,KAAK2O,MAAQ,IACb3O,KAAK4O,OAAS,IAGd5O,KAAKgmB,aAAc,EAEnB,IAAIpjB,EAAO5C,KAMP+P,EAAe1C,OAAO0C,kBAEE,IAAjBA,IAC2B,oBAAvBC,qBAEPD,EAAeC,oBAGY,oBAApBC,kBAEPF,EAAeE,kBAKvB,IAAIvL,EAAM2I,OAAO3I,SAEE,IAARA,GAA4C,oBAAdwH,YAErCxH,EAAMwH,WAGe,oBAAdzG,gBAA+D,IAA3BA,UAAU8H,oBACT,IAAjC9H,UAAUyK,qBACjBzK,UAAU8H,aAAe9H,UAAUyK,yBAGE,IAA9BzK,UAAUC,kBACjBD,UAAU8H,aAAe9H,UAAUC,kBAI3C,IAAIyF,EAAckC,OAAOlC,iBAEE,IAAhBA,GAA4D,oBAAtBmH,oBAC7CnH,EAAcmH,wBAIS,IAAhBnH,QAEmC,IAA/BA,EAAYvL,UAAUmE,OAC7BoH,EAAYvL,UAAUmE,KAAO,WACzB/D,KAAKwJ,YAAYpF,SAAQ,SAASmO,GAC9BA,EAAMxO,MAC1B,GACA,GAII,IAAI4E,EAAU,CAAA,EAsBd,SAASsd,IACL,IAAIP,EAAJ,CAIA,IAAIQ,EAAeT,EAAO/lB,OAEtBymB,GAAa,EACbC,EAAY,GAchB,GAbAX,EAAOrhB,SAAQ,SAAS6E,GACfA,EAAM+I,SACP/I,EAAM+I,OAAS,IAGf/I,EAAM+I,OAAOmU,WACbA,EAAald,EAGbmd,EAAU/jB,KAAK4G,EAE/B,IAEYkd,EACA7a,EAAOqD,MAAQwX,EAAWnU,OAAOrD,MACjCrD,EAAOsD,OAASuX,EAAWnU,OAAOpD,YAC/B,GAAIwX,EAAU1mB,OAAQ,CACzB4L,EAAOqD,MAAQuX,EAAe,EAAyB,EAArBE,EAAU,GAAGzX,MAAYyX,EAAU,GAAGzX,MAExE,IAAIC,EAAS,EACQ,IAAjBsX,GAAuC,IAAjBA,IACtBtX,EAAS,GAEQ,IAAjBsX,GAAuC,IAAjBA,IACtBtX,EAAS,GAEQ,IAAjBsX,GAAuC,IAAjBA,IACtBtX,EAAS,GAEQ,IAAjBsX,GAAuC,KAAjBA,IACtBtX,EAAS,GAEbtD,EAAOsD,OAASwX,EAAU,GAAGxX,OAASA,CAClD,MACYtD,EAAOqD,MAAQ/L,EAAK+L,OAAS,IAC7BrD,EAAOsD,OAAShM,EAAKgM,QAAU,IAG/BuX,GAAcA,aAAsB9X,kBACpCH,EAAUiY,GAGdC,EAAUhiB,SAAQ,SAAS6E,EAAOsT,GAC9BrO,EAAUjF,EAAOsT,EAC7B,IAEQ1Y,WAAWoiB,EAAoBrjB,EAAK2I,cApDnC,CAqDJ,CAED,SAAS2C,EAAUjF,EAAOsT,GACtB,IAAImJ,EAAJ,CAIA,IAAIW,EAAI,EACJhlB,EAAI,EACJsN,EAAQ1F,EAAM0F,MACdC,EAAS3F,EAAM2F,OAEP,IAAR2N,IACA8J,EAAIpd,EAAM0F,OAGF,IAAR4N,IACAlb,EAAI4H,EAAM2F,QAGF,IAAR2N,IACA8J,EAAIpd,EAAM0F,MACVtN,EAAI4H,EAAM2F,QAGF,IAAR2N,IACAlb,EAAmB,EAAf4H,EAAM2F,QAGF,IAAR2N,IACA8J,EAAIpd,EAAM0F,MACVtN,EAAmB,EAAf4H,EAAM2F,QAGF,IAAR2N,IACAlb,EAAmB,EAAf4H,EAAM2F,QAGF,IAAR2N,IACA8J,EAAIpd,EAAM0F,MACVtN,EAAmB,EAAf4H,EAAM2F,aAGmB,IAAtB3F,EAAM+I,OAAOiI,OACpBoM,EAAIpd,EAAM+I,OAAOiI,WAGW,IAArBhR,EAAM+I,OAAO8T,MACpBzkB,EAAI4H,EAAM+I,OAAO8T,UAGa,IAAvB7c,EAAM+I,OAAOrD,QACpBA,EAAQ1F,EAAM+I,OAAOrD,YAGU,IAAxB1F,EAAM+I,OAAOpD,SACpBA,EAAS3F,EAAM+I,OAAOpD,QAG1B2K,EAAQrL,UAAUjF,EAAOod,EAAGhlB,EAAGsN,EAAOC,GAED,mBAA1B3F,EAAM+I,OAAOsU,UACpBrd,EAAM+I,OAAOsU,SAAS/M,EAAS8M,EAAGhlB,EAAGsN,EAAOC,EAAQ2N,EAzDvD,CA2DJ,CAuGD,SAASgK,EAASvU,GACd,IAAI/I,EAAQwE,SAASG,cAAc,SAcnC,OA5PJ,SAAsBoE,EAAQ9C,GACtB,cAAeA,EACfA,EAAQkD,UAAYJ,EACb,iBAAkB9C,EACzBA,EAAQmD,aAAeL,EAEvB9C,EAAQkD,UAAYJ,CAE3B,CAwOGG,CAAaH,EAAQ/I,GAErBA,EAAM8c,UAAYP,EAElBvc,EAAMoW,OAAQ,EACdpW,EAAMud,OAAS,EAEfvd,EAAM0F,MAAQqD,EAAOrD,OAAS/L,EAAK+L,OAAS,IAC5C1F,EAAM2F,OAASoD,EAAOpD,QAAUhM,EAAKgM,QAAU,IAE/C3F,EAAMgF,OAEChF,CACV,CAqFD,SAASwd,EAAkBC,GACvBjB,EAAS,IACTiB,EAAUA,GAAWnB,GAGbnhB,SAAQ,SAAS4N,GACrB,GAAKA,EAAOxI,YAAY0I,QAAO,SAAS7S,GAChC,MAAkB,UAAXA,EAAE4S,IACZ,IAAEvS,OAFP,CAMA,IAAIuJ,EAAQsd,EAASvU,GACrB/I,EAAM+I,OAASA,EACfyT,EAAOpjB,KAAK4G,EAJX,CAKb,GACK,MAxW2B,IAAjB8G,EACPpH,EAAQoH,aAAeA,EACc,oBAAvBC,qBACdrH,EAAQoH,aAAeC,oBAa3BhQ,KAAK2mB,mBAAqB,WACtBV,GACR,EAmPIjmB,KAAK4mB,cAAgB,SAASF,GAC1B,IAAKA,EACD,KAAM,+BAGJA,aAAmBtc,QACrBsc,EAAU,CAACA,IAGfA,EAAQtiB,SAAQ,SAAS4N,GACrB,IAAIhH,EAAY,IAAIG,EAEpB,GAAI6G,EAAOxI,YAAY0I,QAAO,SAAS7S,GAC/B,MAAkB,UAAXA,EAAE4S,IACZ,IAAEvS,OAAQ,CACX,IAAIuJ,EAAQsd,EAASvU,GACrB/I,EAAM+I,OAASA,EACfyT,EAAOpjB,KAAK4G,GAEZ+B,EAAUI,SAAS4G,EAAOxI,YAAY0I,QAAO,SAAS7S,GAClD,MAAkB,UAAXA,EAAE4S,IAC7B,IAAmB,GACN,CAED,GAAID,EAAOxI,YAAY0I,QAAO,SAAS7S,GAC/B,MAAkB,UAAXA,EAAE4S,IACZ,IAAEvS,OAAQ,CACX,IAAImnB,EAAcjkB,EAAKkkB,aAAarN,wBAAwBzH,GAC5DpP,EAAKmkB,iBAAmBnkB,EAAKkkB,aAAanM,+BAC1CkM,EAAY9M,QAAQnX,EAAKmkB,kBAEzB/b,EAAUI,SAASxI,EAAKmkB,iBAAiB/U,OAAOxI,YAAY0I,QAAO,SAAS7S,GACxE,MAAkB,UAAXA,EAAE4S,IAC7B,IAAmB,GACN,CAEDsT,EAAoBljB,KAAK2I,EACrC,GACA,EAEIhL,KAAKgnB,eAAiB,WAClBvB,EAAS,GACTC,GAAsB,EAElB9iB,EAAKqkB,WACLrkB,EAAKqkB,SAAS7M,aACdxX,EAAKqkB,SAAW,MAGhBrkB,EAAKskB,aAAaxnB,SAClBkD,EAAKskB,aAAa9iB,SAAQ,SAAS+iB,GAC/BA,EAAO/M,YACvB,IACYxX,EAAKskB,aAAe,IAGpBtkB,EAAKmkB,mBACLnkB,EAAKmkB,iBAAiB3M,aACtBxX,EAAKmkB,iBAAmB,MAGxBnkB,EAAKkkB,cACLlkB,EAAKkkB,aAAaje,QAGtBjG,EAAKkkB,aAAe,KAEpBvN,EAAQ6N,UAAU,EAAG,EAAG9b,EAAOqD,MAAOrD,EAAOsD,QAEzCtD,EAAO0G,SACP1G,EAAO0G,OAAOjO,OACduH,EAAO0G,OAAS,KAE5B,EAEIhS,KAAKymB,kBAAoB,SAASC,IAC1BA,GAAaA,aAAmBtc,QAChCsc,EAAU,CAACA,IAGfD,EAAkBC,EAC1B,EAqBI1mB,KAAKwD,KAAO,oBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,EAEIxD,KAAKqnB,eAlOL,WACI3B,GAAsB,EACtB,IAAI4B,EAyBR,WAGI,IAAIC,EAFJd,IAII,kBAAmBnb,EACnBic,EAAiBjc,EAAOuC,gBACjB,qBAAsBvC,EAC7Bic,EAAiBjc,EAAOwC,mBAChBlL,EAAKQ,aACbC,QAAQmK,MAAM,qHAGlB,IAAIga,EAAc,IAAIrc,EAUtB,OARAoc,EAAe/d,YAAY0I,QAAO,SAAS7S,GACvC,MAAkB,UAAXA,EAAE4S,IACrB,IAAW7N,SAAQ,SAASmO,GAChBiV,EAAYpc,SAASmH,EACjC,IAEQjH,EAAO0G,OAASwV,EAETA,CACV,CAjD0BC,GAEnBC,EAiDR,WAES/e,EAAQC,0BACTD,EAAQC,wBAA0B,IAAID,EAAQoH,cAGlDnN,EAAKkkB,aAAene,EAAQC,wBAE5BhG,EAAKskB,aAAe,IAEK,IAArBtkB,EAAKojB,cACLpjB,EAAKqkB,SAAWrkB,EAAKkkB,aAAaa,aAClC/kB,EAAKqkB,SAASlN,QAAQnX,EAAKkkB,aAAalM,aACxChY,EAAKqkB,SAASW,KAAKlnB,MAAQ,GAG/B,IAAImnB,EAAoB,EAmBxB,GAlBAtC,EAAoBnhB,SAAQ,SAAS4N,GACjC,GAAKA,EAAOxI,YAAY0I,QAAO,SAAS7S,GAChC,MAAkB,UAAXA,EAAE4S,IACZ,IAAEvS,OAFP,CAMAmoB,IAEA,IAAIhB,EAAcjkB,EAAKkkB,aAAarN,wBAAwBzH,IAEnC,IAArBpP,EAAKojB,aACLa,EAAY9M,QAAQnX,EAAKqkB,UAG7BrkB,EAAKskB,aAAa7kB,KAAKwkB,EAVtB,CAWb,KAEagB,EAGD,OAOJ,OAJAjlB,EAAKmkB,iBAAmBnkB,EAAKkkB,aAAanM,+BAC1C/X,EAAKskB,aAAa9iB,SAAQ,SAASyiB,GAC/BA,EAAY9M,QAAQnX,EAAKmkB,iBACrC,IACenkB,EAAKmkB,iBAAiB/U,MAChC,CA/F0B8V,GAoBvB,OAnBIJ,GACAA,EAAiBle,YAAY0I,QAAO,SAAS7S,GACzC,MAAkB,UAAXA,EAAE4S,IACzB,IAAe7N,SAAQ,SAASmO,GAChB+U,EAAiBlc,SAASmH,EAC1C,IAIQgT,EAAoBnhB,SAAQ,SAAS4N,GAC7BA,EAAOmU,UAGvB,IAMemB,CACV,CA2MJ;;;;;;;;;;;;;;;;;;;;;;;;AA6CD,SAASjd,EAAoBkb,EAAqB3Y,GAC9C2Y,EAAsBA,GAAuB,GAC7C,IAEIwC,EACA9kB,EAHAL,EAAO5C,MAKX4M,EAAUA,GAAW,CACjB4Y,aAAc,sBACd9b,SAAU,aACVT,MAAO,CACH0F,MAAO,IACPC,OAAQ,OAIHrD,gBACTqB,EAAQrB,cAAgB,IAGvBqB,EAAQ3D,QACT2D,EAAQ3D,MAAQ,IAGf2D,EAAQ3D,MAAM0F,QACf/B,EAAQ3D,MAAM0F,MAAQ,KAGrB/B,EAAQ3D,MAAM2F,SACfhC,EAAQ3D,MAAM2F,OAAS,KAU3B5O,KAAKkD,OAAS,WAoBd,IACQ8kB,EAnBJD,EAAQ,IAAIzC,EAAkBC,EAAqB3Y,EAAQ4Y,cAAgB,wBAmBvEwC,EAAS,GACbzC,EAAoBnhB,SAAQ,SAAS4N,GACjCxI,EAAUwI,EAAQ,SAAS5N,SAAQ,SAASmO,GACxCyV,EAAO3lB,KAAKkQ,EAC5B,GACA,IACeyV,GAvBiBtoB,SACpBqoB,EAAMxc,cAAgBqB,EAAQrB,eAAiB,GAC/Cwc,EAAMpZ,MAAQ/B,EAAQ3D,MAAM0F,OAAS,IACrCoZ,EAAMnZ,OAAShC,EAAQ3D,MAAM2F,QAAU,IACvCmZ,EAAMpB,sBAGN/Z,EAAQqb,eAAkD,mBAA1Brb,EAAQqb,eACxCrb,EAAQqb,cAAcF,EAAMV,mBAIhCpkB,EAAgB,IAAIsG,EAAoBwe,EAAMV,iBAAkBza,IAClD1J,QACtB,EAsBIlD,KAAK+D,KAAO,SAASL,GACZT,GAILA,EAAcc,MAAK,SAASO,GACxB1B,EAAK0B,KAAOA,EAEZZ,EAASY,GAET1B,EAAKuE,mBACjB,GACA,EASInH,KAAKqH,MAAQ,WACLpE,GACAA,EAAcoE,OAE1B,EASIrH,KAAKsH,OAAS,WACNrE,GACAA,EAAcqE,QAE1B,EASItH,KAAKmH,kBAAoB,WACjBlE,IACAA,EAAckE,oBACdlE,EAAgB,MAGhB8kB,IACAA,EAAMf,iBACNe,EAAQ,KAEpB,EAUI/nB,KAAKkoB,WAAa,SAASxB,GACvB,IAAKA,EACD,KAAM,+BAGJA,aAAmBtc,QACrBsc,EAAU,CAACA,IAGfnB,EAAoBrG,OAAOwH,GAEtBzjB,GAAkB8kB,IAIvBA,EAAMnB,cAAcF,GAEhB9Z,EAAQqb,eAAkD,mBAA1Brb,EAAQqb,eACxCrb,EAAQqb,cAAcF,EAAMV,kBAExC,EAUIrnB,KAAKymB,kBAAoB,SAASC,GACzBqB,KAIDrB,GAAaA,aAAmBtc,QAChCsc,EAAU,CAACA,IAGfqB,EAAMtB,kBAAkBC,GAChC,EAUI1mB,KAAKmoB,SAAW,WACZ,OAAOJ,CACf,EAGI/nB,KAAKwD,KAAO,sBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,CACC;;;;;;;;;;;;;;;;;;AAiTD,SAAS4F,EAAoB4I,EAAQvP,GAsBjC,IAAI2lB,EA8CAhiB,EA8EAiT,EA1HJ,SAASgP,IACL,OAAO,IAAIpe,eAAe,CACtBwL,MAAO,SAAS6S,GACZ,IAAIC,EAAM9a,SAASG,cAAc,UAC7B3E,EAAQwE,SAASG,cAAc,SAC/B4a,GAAQ,EACZvf,EAAMmJ,UAAYJ,EAClB/I,EAAMoW,OAAQ,EACdpW,EAAM2F,OAASnM,EAAOmM,OACtB3F,EAAM0F,MAAQlM,EAAOkM,MACrB1F,EAAMud,OAAS,EACfvd,EAAMwf,UAAY,WACdF,EAAI5Z,MAAQlM,EAAOkM,MACnB4Z,EAAI3Z,OAASnM,EAAOmM,OACpB,IAAI8Z,EAAMH,EAAIva,WAAW,MACrB2a,EAAe,IAAOlmB,EAAOiJ,UAC7Bkd,EAAcC,aAAY,WAc1B,GAbIT,IACAU,cAAcF,GACdN,EAAWzf,SAGX2f,IACAA,GAAQ,EACJ/lB,EAAOsmB,uBACPtmB,EAAOsmB,yBAIfL,EAAIxa,UAAUjF,EAAO,EAAG,GAC2B,WAA/Cqf,EAAWU,0BAA0BrlB,MACrC,IACI2kB,EAAWW,QACPP,EAAI9J,aAAa,EAAG,EAAGnc,EAAOkM,MAAOlM,EAAOmM,QAEhF,CAA8B,MAAO/N,GAAK,CAErB,GAAE8nB,EACvB,EACgB1f,EAAMgF,MACT,GAER,CAID,SAASjH,EAAegL,EAAQ1J,GAC5B,IAAK7F,EAAO+I,aAAelD,EAYvB,OAXA8f,GAAW,OAIXc,MACI,0DACFjoB,MAAK,SAAS8d,GACZA,EAAEoK,cAAcloB,MAAK,SAASqH,GAC1BtB,EAAegL,EAAQ1J,EAC3C,GACA,IAIQ,IAAK7F,EAAO+I,YAAclD,aAAkBqQ,YAAa,CACrD,IAAIrU,EAAO,IAAI4B,KAAK,CAACoC,GAAS,CAC1B3F,KAAM,oBAEVF,EAAO+I,WAAa9G,EAAIC,gBAAgBL,EAC3C,CAEI7B,EAAO+I,YACRnI,QAAQmK,MAAM,qCAGlBpH,EAAS,IAAIZ,OAAO/C,EAAO+I,aAEpBpG,YAAY3C,EAAOgJ,iBAAmB,0DAC7CrF,EAAOgjB,iBAAiB,WAAW,SAAStjB,GACrB,UAAfA,EAAMU,MACNJ,EAAOhB,YAAY,CACfuJ,MAAOlM,EAAOkM,MACdC,OAAQnM,EAAOmM,OACfjD,QAASlJ,EAAOkJ,SAAW,KAC3B0d,YAAa5mB,EAAOiJ,WAAa,GACjC4d,SAAU7mB,EAAO6mB,WAGrBjB,IAAekB,OAAO,IAAIC,eAAe,CACrCC,MAAO,SAASthB,GACRigB,EACA/kB,QAAQmK,MAAM,wCAIlBpH,EAAOhB,YAAY+C,EAAM3B,KAAK8B,OAAQ,CAACH,EAAM3B,KAAK8B,QACrD,MAEIxC,EAAMU,OACV6S,GACDqQ,EAAernB,KAAKyD,EAAMU,MAG9C,GACK,CA3H6B,oBAAnByD,gBAA4D,oBAAnBuf,gBAEhDnmB,QAAQmK,MAAM,4HAGlB/K,EAASA,GAAU,IAEZkM,MAAQlM,EAAOkM,OAAS,IAC/BlM,EAAOmM,OAASnM,EAAOmM,QAAU,IACjCnM,EAAOiJ,UAAYjJ,EAAOiJ,WAAa,GACvCjJ,EAAOkJ,QAAUlJ,EAAOkJ,SAAW,KACnClJ,EAAO6mB,SAAW7mB,EAAO6mB,WAAY,EAyHrCtpB,KAAKkD,OAAS,WACVwmB,EAAiB,GACjBrQ,GAAW,EACXrZ,KAAKsE,KAAO,KACZ0C,EAAegL,GAEoB,mBAAxBvP,EAAOK,cACdL,EAAOK,cAEnB,EAWI9C,KAAKqH,MAAQ,WACTgS,GAAW,CACnB,EASIrZ,KAAKsH,OAAS,WACV+R,GAAW,CACnB,EA0BI,IAAIqQ,EAAiB,GAYrB1pB,KAAK+D,KAAO,SAASL,GACjB0kB,GAAW,EAEX,IAAIve,EAAW7J,MAvCnB,SAAmB0D,GACV0C,GASLA,EAAOgjB,iBAAiB,WAAW,SAAStjB,GACrB,OAAfA,EAAMU,OACNJ,EAAO8S,YACP9S,EAAS,KAEL1C,GACAA,IAGpB,IAEQ0C,EAAOhB,YAAY,OAnBX1B,GACAA,GAmBX,CAmBGwV,EAAU,WACNrP,EAASvF,KAAO,IAAI4B,KAAKwjB,EAAgB,CACrC/mB,KAAM,eAGVe,EAASmG,EAASvF,KAC9B,GACA,EAGItE,KAAKwD,KAAO,sBACZxD,KAAKmG,SAAW,WACZ,OAAOnG,KAAKwD,IACpB,EASIxD,KAAKmH,kBAAoB,WACrBuiB,EAAiB,GACjBrQ,GAAW,EACXrZ,KAAKsE,KAAO,IAGpB,EAUItE,KAAKsE,KAAO,IACf,MA5nDwB,IAAd/B,IACPA,EAAUyC,YAAcA,QA8RH,IAAdzC,IACPA,EAAU8G,YAAcA,QAyjBH,IAAd9G,IAEHgK,EAAAC,QAAiB8Y,QAwPA,IAAd/iB,IACPA,EAAU8H,oBAAsBA,QAsRX,IAAd9H,IACPA,EAAUonB;;;;;;;;;;;;;;;;;;;;;;AA3Pd,SAAkCnnB,EAAaoK,GAC3C,IAAK5M,KACD,KAAM,uCAGV,QAA2B,IAAhBwC,EACP,KAAM,4CAGV,IAAII,EAAO5C,KAUX4C,EAAKgnB,UAAY,IAAIrnB,EAAUC,EAAaoK,GAW5C5M,KAAKgH,eAAiB,WAClB,OAAO,IAAI1G,SAAQ,SAASC,EAASC,GACjC,IACIoC,EAAKgnB,UAAU5iB,iBACfzG,GACH,CAAC,MAAOM,GACLL,EAAOK,EACV,CACb,GACA,EAWIb,KAAKyD,cAAgB,WACjB,OAAO,IAAInD,SAAQ,SAASC,EAASC,GACjC,IACIoC,EAAKgnB,UAAUnmB,eAAc,SAASgB,GAClC7B,EAAK0B,KAAO1B,EAAKgnB,UAAUpiB,UAEtB5E,EAAK0B,MAAS1B,EAAK0B,KAAKE,KAK7BjE,EAAQkE,GAJJjE,EAAO,cAAeoC,EAAK0B,KAKnD,GACa,CAAC,MAAOzD,GACLL,EAAOK,EACV,CACb,GACA,EAWIb,KAAKoH,eAAiB,WAClB,OAAO,IAAI9G,SAAQ,SAASC,EAASC,GACjC,IACIoC,EAAKgnB,UAAUxiB,iBACf7G,GACH,CAAC,MAAOM,GACLL,EAAOK,EACV,CACb,GACA,EAWIb,KAAK4D,gBAAkB,WACnB,OAAO,IAAItD,SAAQ,SAASC,EAASC,GACjC,IACIoC,EAAKgnB,UAAUhmB,kBACfrD,GACH,CAAC,MAAOM,GACLL,EAAOK,EACV,CACb,GACA,EAaIb,KAAK6E,WAAa,SAASnB,GACvB,OAAO,IAAIpD,SAAQ,SAASC,EAASC,GACjC,IACIoC,EAAKgnB,UAAU/kB,YAAW,SAASC,GAC/BvE,EAAQuE,EAC5B,GACa,CAAC,MAAOjE,GACLL,EAAOK,EACV,CACb,GACA,EAWIb,KAAKwH,QAAU,WACX,OAAO,IAAIlH,SAAQ,SAASC,EAASC,GACjC,IACID,EAAQqC,EAAKgnB,UAAUpiB,UAC1B,CAAC,MAAO3G,GACLL,EAAOK,EACV,CACb,GACA,EAcIb,KAAK0H,oBAAsB,WACvB,OAAO,IAAIpH,SAAQ,SAASC,EAASC,GACjC,IACID,EAAQqC,EAAKgnB,UAAUliB,sBAC1B,CAAC,MAAO7G,GACLL,EAAOK,EACV,CACb,GACA,EAUIb,KAAKuI,MAAQ,WACT,OAAO,IAAIjI,SAAQ,SAASC,EAASC,GACjC,IACID,EAAQqC,EAAKgnB,UAAUrhB,QAC1B,CAAC,MAAO1H,GACLL,EAAOK,EACV,CACb,GACA,EASIb,KAAKyI,QAAU,WACX,OAAO,IAAInI,SAAQ,SAASC,EAASC,GACjC,IACID,EAAQqC,EAAKgnB,UAAUnhB,UAC1B,CAAC,MAAO5H,GACLL,EAAOK,EACV,CACb,GACA,EAYIb,KAAKwI,SAAW,WACZ,OAAO,IAAIlI,SAAQ,SAASC,EAASC,GACjC,IACID,EAAQqC,EAAKgnB,UAAUphB,WAC1B,CAAC,MAAO3H,GACLL,EAAOK,EACV,CACb,GACA,EAUIb,KAAKsE,KAAO,KAWZtE,KAAKkH,QAAU,OAClB,QAsRwB,IAAd3E,IACPA,EAAU6G,oBAAsBA,uBC7jMvBygB,EAAe,SAACjd,GAC5B,IAAMkd,EAAkBC,EAAgC,MAClDC,EAAkBD,EAAgC,MAElDE,EAAkBC,EAAsB,MAAvC5lB,EAAI2lB,EAAA,GAAEE,EAAOF,EAAA,GACdG,EAA0BF,EAA0C,MAAnErgB,EAAQugB,EAAA,GAAEC,EAAWD,EAAA,GACtBE,EAAoCJ,EAAiB,YAApDK,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAEhCG,EAAkCP,EAA6B,MAA9DQ,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAG/B7d,EAAQge,eACZhe,EAAQge,aAAe,GAGxB,IAAMC,EAAqB,SAAOC,GAAsC,OAAA7qB,OAAA,OAAA,OAAA,GAAA,qEAElD,6BAAM,CAAA,EAAAwF,UAAUslB,aAAaxd,aAAaud,WAI9D,OAJMtoB,EAAcynB,EAAsDxoB,OACrEqpB,EAAY9hB,OAChBxG,EAAYwoB,iBAAiB5mB,SAAQ,SAAAmO,GAAS,OAAAA,EAAMxO,MAAN,IAE/C,CAAA,EAAOvB,UAGP,iBADAa,QAAQmK,MAAM,iCAAkCyd,GAC1CA,2BA4BRC,GAAU,WACLR,GAXyB,SAAC1Y,EAAqBtO,GACnD,GAAKsO,EAAL,CACA,IAAMmZ,EAAe,WACpBznB,GACD,EACAsO,EAAOoX,iBAAiB,QAAS+B,GACjCnZ,EAAOoX,iBAAiB,WAAY+B,GACpCnZ,EAAOxI,YAAYpF,SAAQ,SAAAmO,GAAS,OAAAA,EAAM6W,iBAAiB,QAAS+B,EAAa,GAN7D,CAOrB,CAIEC,CAAsBV,EAAcjnB,EAEtC,GAAG,CAACinB,IAEJQ,GAAU,WACT7nB,QAAQC,IAAIuG,EACb,GAAG,CAACA,IAEJ,IAcMpG,EAAgB,WAAA,OAAAxD,OAAA,OAAA,OAAA,GAAA,mEACrB,OAAK4J,EAEDA,EACH,CAAA,EAAMA,EAASpG,iBADJ,CAAA,EAAA,GAFU,CAAA,UAIR,OADbwmB,EAAAxoB,OACa,CAAA,EAAMoI,EAASrC,kBAAtB6jB,EAAOpB,EAAwBxoB,OACrC0oB,EAAQkB,GACRb,EAAiB,8CA0BnB,MAAO,CAENlmB,KAAIA,EACJuF,SAAQA,EACR0gB,cAAaA,EACbT,gBAAeA,EACfE,gBAAeA,EAEfsB,gBAzFuB,SAAOR,GAAsC,OAAA7qB,OAAA,OAAA,OAAA,GAAA,uEAE9C,6BAAM,CAAA,EAAAwF,UAAUslB,aAAaQ,gBAAgBT,kBAA5DU,EAAevB,EAAyDxoB,OAC1EqpB,EAAY9hB,MACK,CAAA,EAAM6hB,EAAmB,CAAC7hB,OAAO,EAAMC,OAAO,KAD9C,CAAA,EAAA,UACdwiB,EAAcxB,EAAqDxoB,OACzE+pB,EAAapgB,SAASqgB,EAAYT,iBAAiB,cAEpD,KAAA,EAAA,MAAA,CAAA,EAAOQ,UAGP,iBADAnoB,QAAQmK,MAAM,wCAAyCke,GACjDA,2BAgFPb,mBAAkBA,EAElB7jB,eA1DsB,SAAA2kB,+DAAO,OAAA1rB,OAAA,EFmJxB,SAAuB2rB,EAAIC,EAAMC,GACpC,GAAIA,GAA6B,IAArBrsB,UAAUC,OAAc,IAAK,IAA4BqsB,EAAxBxsB,EAAI,EAAGysB,EAAIH,EAAKnsB,OAAYH,EAAIysB,EAAGzsB,KACxEwsB,GAAQxsB,KAAKssB,IACRE,IAAIA,EAAK3hB,MAAMxK,UAAU2T,MAAMzT,KAAK+rB,EAAM,EAAGtsB,IAClDwsB,EAAGxsB,GAAKssB,EAAKtsB,IAGrB,OAAOqsB,EAAG1M,OAAO6M,GAAM3hB,MAAMxK,UAAU2T,MAAMzT,KAAK+rB,GACtD,CE3J+BI,CAAA,CAAAN,GAAAO,GAAA,QAAA,GAAA,SAAAla,EAAqBrP,eAAA,IAAAA,IAAAA,EAA+B,oDAEjF,OADAgoB,EAAgB3Y,GACV,CAAA,EAAA,IAAI1R,SAAQ,SAACC,GAAY,OAAAsD,YAAW,WAAA,OAAA5D,OAAA,OAAA,OAAA,GAAA,0EACzC2M,EAAQuf,wBAA2B,CAAA,EAAMvf,EAAQuf,2BAAlB,CAAA,EAAA,UAAI/B,EAAuC3oB,wBAM1E,OALMoI,EAAW,IAAI8f,EAAwBA,yBAAC3X,EAC1C9S,EAAAA,EAAA,CAAA,EAAA0N,EAAQwf,YAAc,CAAE,GAAA,CAC3BzpB,KAAIA,KAEL0nB,EAAYxgB,GACZ,CAAA,EAAMA,EAAS7C,gCAAfojB,EAAA3oB,OACAlB,EAAQsJ,aACR,GAAyB,IAAvB+C,EAAQge,aAAoB,mBAT/BX,EAAAxoB,mBAyDA2F,eAlCsB,WAAA,OAAAnH,OAAA,OAAA,OAAA,GAAA,0EAClBgqB,GAACpgB,GAAQ,CAAA,EAAA,GAAI,CAAA,EAAOA,EAASrB,mBAAhByhB,EAAgC,cAAhCG,EAAA3oB,wBAAjB,OAAAwoB,EAAqE,CAAA,IACjEH,EAAgBuC,SACnBvC,EAAgBuC,QAAQhlB,QAErB2iB,EAAgBqC,SACnBrC,EAAgBqC,QAAQhlB,QAEzB,CAAA,EAAMwC,EAASzC,iCAAfgjB,EAAA3oB,mBA2BAmC,gBAxBuB,WAAA,OAAA3D,OAAA,OAAA,OAAA,GAAA,0EACnBgqB,GAACpgB,GAAQ,CAAA,EAAA,GAAI,CAAA,EAAOA,EAASrB,mBAAhByhB,EAAgC,WAAhCG,EAAA3oB,wBAAjB,OAAAwoB,EAAkE,CAAA,GAC9DH,EAAgBuC,QACnB,CAAA,EAAMvC,EAAgBuC,QAAQpe,QADJ,CAAA,EAAA,UAC1Bmc,EAAA3oB,+BAEGuoB,EAAgBqC,QACnB,CAAA,EAAMrC,EAAgBqC,QAAQpe,QADJ,CAAA,EAAA,UAC1Bmc,EAAA3oB,iBAED,KAAA,EAAA,MAAA,CAAA,EAAMoI,EAASjG,iCAAfwmB,EAAA3oB,mBAiBAgC,cAAaA,EAEf","x_google_ignoreList":[0,1]}